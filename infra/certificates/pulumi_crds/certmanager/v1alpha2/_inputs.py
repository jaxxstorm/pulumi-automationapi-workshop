# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'CertificateSpecArgs',
    'CertificateSpecIssuerRefArgs',
    'CertificateSpecKeystoresArgs',
    'CertificateSpecKeystoresJksArgs',
    'CertificateSpecKeystoresJksPasswordSecretRefArgs',
    'CertificateSpecKeystoresPkcs12Args',
    'CertificateSpecKeystoresPkcs12PasswordSecretRefArgs',
    'CertificateSpecPrivateKeyArgs',
    'CertificateSpecSubjectArgs',
    'CertificateStatusArgs',
    'CertificateStatusConditionsArgs',
]

@pulumi.input_type
class CertificateSpecArgs:
    def __init__(__self__, *,
                 issuer_ref: pulumi.Input['CertificateSpecIssuerRefArgs'],
                 secret_name: pulumi.Input[str],
                 common_name: Optional[pulumi.Input[str]] = None,
                 dns_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 duration: Optional[pulumi.Input[str]] = None,
                 email_sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 encode_usages_in_request: Optional[pulumi.Input[bool]] = None,
                 ip_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_ca: Optional[pulumi.Input[bool]] = None,
                 key_algorithm: Optional[pulumi.Input[str]] = None,
                 key_encoding: Optional[pulumi.Input[str]] = None,
                 key_size: Optional[pulumi.Input[int]] = None,
                 keystores: Optional[pulumi.Input['CertificateSpecKeystoresArgs']] = None,
                 organization: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 private_key: Optional[pulumi.Input['CertificateSpecPrivateKeyArgs']] = None,
                 renew_before: Optional[pulumi.Input[str]] = None,
                 revision_history_limit: Optional[pulumi.Input[int]] = None,
                 subject: Optional[pulumi.Input['CertificateSpecSubjectArgs']] = None,
                 uri_sans: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 usages: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Desired state of the Certificate resource.
        :param pulumi.Input['CertificateSpecIssuerRefArgs'] issuer_ref: IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
        :param pulumi.Input[str] secret_name: SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
        :param pulumi.Input[str] common_name: CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names: DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
        :param pulumi.Input[str] duration: The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If overridden and `renewBefore` is greater than the actual certificate duration, the certificate will be automatically renewed 2/3rds of the way through the certificate's duration.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] email_sans: EmailSANs is a list of email subjectAltNames to be set on the Certificate.
        :param pulumi.Input[bool] encode_usages_in_request: EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ip_addresses: IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
        :param pulumi.Input[bool] is_ca: IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
        :param pulumi.Input[str] key_algorithm: KeyAlgorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `rsa` or `ecdsa` If `keyAlgorithm` is specified and `keySize` is not provided, key size of 256 will be used for `ecdsa` key algorithm and key size of 2048 will be used for `rsa` key algorithm.
        :param pulumi.Input[str] key_encoding: KeyEncoding is the private key cryptography standards (PKCS) for this certificate's private key to be encoded in. If provided, allowed values are `pkcs1` and `pkcs8` standing for PKCS#1 and PKCS#8, respectively. If KeyEncoding is not specified, then `pkcs1` will be used by default.
        :param pulumi.Input[int] key_size: KeySize is the key bit size of the corresponding private key for this certificate. If `keyAlgorithm` is set to `rsa`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `keyAlgorithm` is set to `ecdsa`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. No other values are allowed.
        :param pulumi.Input['CertificateSpecKeystoresArgs'] keystores: Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] organization: Organization is a list of organizations to be used on the Certificate.
        :param pulumi.Input['CertificateSpecPrivateKeyArgs'] private_key: Options to control private keys used for the Certificate.
        :param pulumi.Input[str] renew_before: The amount of time before the currently issued certificate's `notAfter` time that cert-manager will begin to attempt to renew the certificate. If this value is greater than the total duration of the certificate (i.e. notAfter - notBefore), it will be automatically renewed 2/3rds of the way through the certificate's duration.
        :param pulumi.Input[int] revision_history_limit: revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.
        :param pulumi.Input['CertificateSpecSubjectArgs'] subject: Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] uri_sans: URISANs is a list of URI subjectAltNames to be set on the Certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] usages: Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
        """
        pulumi.set(__self__, "issuer_ref", issuer_ref)
        pulumi.set(__self__, "secret_name", secret_name)
        if common_name is not None:
            pulumi.set(__self__, "common_name", common_name)
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if duration is not None:
            pulumi.set(__self__, "duration", duration)
        if email_sans is not None:
            pulumi.set(__self__, "email_sans", email_sans)
        if encode_usages_in_request is not None:
            pulumi.set(__self__, "encode_usages_in_request", encode_usages_in_request)
        if ip_addresses is not None:
            pulumi.set(__self__, "ip_addresses", ip_addresses)
        if is_ca is not None:
            pulumi.set(__self__, "is_ca", is_ca)
        if key_algorithm is not None:
            pulumi.set(__self__, "key_algorithm", key_algorithm)
        if key_encoding is not None:
            pulumi.set(__self__, "key_encoding", key_encoding)
        if key_size is not None:
            pulumi.set(__self__, "key_size", key_size)
        if keystores is not None:
            pulumi.set(__self__, "keystores", keystores)
        if organization is not None:
            pulumi.set(__self__, "organization", organization)
        if private_key is not None:
            pulumi.set(__self__, "private_key", private_key)
        if renew_before is not None:
            pulumi.set(__self__, "renew_before", renew_before)
        if revision_history_limit is not None:
            pulumi.set(__self__, "revision_history_limit", revision_history_limit)
        if subject is not None:
            pulumi.set(__self__, "subject", subject)
        if uri_sans is not None:
            pulumi.set(__self__, "uri_sans", uri_sans)
        if usages is not None:
            pulumi.set(__self__, "usages", usages)

    @property
    @pulumi.getter(name="issuerRef")
    def issuer_ref(self) -> pulumi.Input['CertificateSpecIssuerRefArgs']:
        """
        IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
        """
        return pulumi.get(self, "issuer_ref")

    @issuer_ref.setter
    def issuer_ref(self, value: pulumi.Input['CertificateSpecIssuerRefArgs']):
        pulumi.set(self, "issuer_ref", value)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        SecretName is the name of the secret resource that will be automatically created and managed by this Certificate resource. It will be populated with a private key and certificate, signed by the denoted issuer.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="commonName")
    def common_name(self) -> Optional[pulumi.Input[str]]:
        """
        CommonName is a common name to be used on the Certificate. The CommonName should have a length of 64 characters or fewer to avoid generating invalid CSRs. This value is ignored by TLS clients when any subject alt name is set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4
        """
        return pulumi.get(self, "common_name")

    @common_name.setter
    def common_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "common_name", value)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        DNSNames is a list of DNS subjectAltNames to be set on the Certificate.
        """
        return pulumi.get(self, "dns_names")

    @dns_names.setter
    def dns_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_names", value)

    @property
    @pulumi.getter
    def duration(self) -> Optional[pulumi.Input[str]]:
        """
        The requested 'duration' (i.e. lifetime) of the Certificate. This option may be ignored/overridden by some issuer types. If overridden and `renewBefore` is greater than the actual certificate duration, the certificate will be automatically renewed 2/3rds of the way through the certificate's duration.
        """
        return pulumi.get(self, "duration")

    @duration.setter
    def duration(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "duration", value)

    @property
    @pulumi.getter(name="emailSANs")
    def email_sans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        EmailSANs is a list of email subjectAltNames to be set on the Certificate.
        """
        return pulumi.get(self, "email_sans")

    @email_sans.setter
    def email_sans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "email_sans", value)

    @property
    @pulumi.getter(name="encodeUsagesInRequest")
    def encode_usages_in_request(self) -> Optional[pulumi.Input[bool]]:
        """
        EncodeUsagesInRequest controls whether key usages should be present in the CertificateRequest
        """
        return pulumi.get(self, "encode_usages_in_request")

    @encode_usages_in_request.setter
    def encode_usages_in_request(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "encode_usages_in_request", value)

    @property
    @pulumi.getter(name="ipAddresses")
    def ip_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        IPAddresses is a list of IP address subjectAltNames to be set on the Certificate.
        """
        return pulumi.get(self, "ip_addresses")

    @ip_addresses.setter
    def ip_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ip_addresses", value)

    @property
    @pulumi.getter(name="isCA")
    def is_ca(self) -> Optional[pulumi.Input[bool]]:
        """
        IsCA will mark this Certificate as valid for certificate signing. This will automatically add the `cert sign` usage to the list of `usages`.
        """
        return pulumi.get(self, "is_ca")

    @is_ca.setter
    def is_ca(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_ca", value)

    @property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        KeyAlgorithm is the private key algorithm of the corresponding private key for this certificate. If provided, allowed values are either `rsa` or `ecdsa` If `keyAlgorithm` is specified and `keySize` is not provided, key size of 256 will be used for `ecdsa` key algorithm and key size of 2048 will be used for `rsa` key algorithm.
        """
        return pulumi.get(self, "key_algorithm")

    @key_algorithm.setter
    def key_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_algorithm", value)

    @property
    @pulumi.getter(name="keyEncoding")
    def key_encoding(self) -> Optional[pulumi.Input[str]]:
        """
        KeyEncoding is the private key cryptography standards (PKCS) for this certificate's private key to be encoded in. If provided, allowed values are `pkcs1` and `pkcs8` standing for PKCS#1 and PKCS#8, respectively. If KeyEncoding is not specified, then `pkcs1` will be used by default.
        """
        return pulumi.get(self, "key_encoding")

    @key_encoding.setter
    def key_encoding(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key_encoding", value)

    @property
    @pulumi.getter(name="keySize")
    def key_size(self) -> Optional[pulumi.Input[int]]:
        """
        KeySize is the key bit size of the corresponding private key for this certificate. If `keyAlgorithm` is set to `rsa`, valid values are `2048`, `4096` or `8192`, and will default to `2048` if not specified. If `keyAlgorithm` is set to `ecdsa`, valid values are `256`, `384` or `521`, and will default to `256` if not specified. No other values are allowed.
        """
        return pulumi.get(self, "key_size")

    @key_size.setter
    def key_size(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "key_size", value)

    @property
    @pulumi.getter
    def keystores(self) -> Optional[pulumi.Input['CertificateSpecKeystoresArgs']]:
        """
        Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
        """
        return pulumi.get(self, "keystores")

    @keystores.setter
    def keystores(self, value: Optional[pulumi.Input['CertificateSpecKeystoresArgs']]):
        pulumi.set(self, "keystores", value)

    @property
    @pulumi.getter
    def organization(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Organization is a list of organizations to be used on the Certificate.
        """
        return pulumi.get(self, "organization")

    @organization.setter
    def organization(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "organization", value)

    @property
    @pulumi.getter(name="privateKey")
    def private_key(self) -> Optional[pulumi.Input['CertificateSpecPrivateKeyArgs']]:
        """
        Options to control private keys used for the Certificate.
        """
        return pulumi.get(self, "private_key")

    @private_key.setter
    def private_key(self, value: Optional[pulumi.Input['CertificateSpecPrivateKeyArgs']]):
        pulumi.set(self, "private_key", value)

    @property
    @pulumi.getter(name="renewBefore")
    def renew_before(self) -> Optional[pulumi.Input[str]]:
        """
        The amount of time before the currently issued certificate's `notAfter` time that cert-manager will begin to attempt to renew the certificate. If this value is greater than the total duration of the certificate (i.e. notAfter - notBefore), it will be automatically renewed 2/3rds of the way through the certificate's duration.
        """
        return pulumi.get(self, "renew_before")

    @renew_before.setter
    def renew_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renew_before", value)

    @property
    @pulumi.getter(name="revisionHistoryLimit")
    def revision_history_limit(self) -> Optional[pulumi.Input[int]]:
        """
        revisionHistoryLimit is the maximum number of CertificateRequest revisions that are maintained in the Certificate's history. Each revision represents a single `CertificateRequest` created by this Certificate, either when it was created, renewed, or Spec was changed. Revisions will be removed by oldest first if the number of revisions exceeds this number. If set, revisionHistoryLimit must be a value of `1` or greater. If unset (`nil`), revisions will not be garbage collected. Default value is `nil`.
        """
        return pulumi.get(self, "revision_history_limit")

    @revision_history_limit.setter
    def revision_history_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "revision_history_limit", value)

    @property
    @pulumi.getter
    def subject(self) -> Optional[pulumi.Input['CertificateSpecSubjectArgs']]:
        """
        Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
        """
        return pulumi.get(self, "subject")

    @subject.setter
    def subject(self, value: Optional[pulumi.Input['CertificateSpecSubjectArgs']]):
        pulumi.set(self, "subject", value)

    @property
    @pulumi.getter(name="uriSANs")
    def uri_sans(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        URISANs is a list of URI subjectAltNames to be set on the Certificate.
        """
        return pulumi.get(self, "uri_sans")

    @uri_sans.setter
    def uri_sans(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "uri_sans", value)

    @property
    @pulumi.getter
    def usages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Usages is the set of x509 usages that are requested for the certificate. Defaults to `digital signature` and `key encipherment` if not specified.
        """
        return pulumi.get(self, "usages")

    @usages.setter
    def usages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "usages", value)


@pulumi.input_type
class CertificateSpecIssuerRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 group: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None):
        """
        IssuerRef is a reference to the issuer for this certificate. If the `kind` field is not set, or set to `Issuer`, an Issuer resource with the given name in the same namespace as the Certificate will be used. If the `kind` field is set to `ClusterIssuer`, a ClusterIssuer with the provided name will be used. The `name` field in this stanza is required at all times.
        :param pulumi.Input[str] name: Name of the resource being referred to.
        :param pulumi.Input[str] group: Group of the resource being referred to.
        :param pulumi.Input[str] kind: Kind of the resource being referred to.
        """
        pulumi.set(__self__, "name", name)
        if group is not None:
            pulumi.set(__self__, "group", group)
        if kind is not None:
            pulumi.set(__self__, "kind", kind)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def group(self) -> Optional[pulumi.Input[str]]:
        """
        Group of the resource being referred to.
        """
        return pulumi.get(self, "group")

    @group.setter
    def group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "group", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind of the resource being referred to.
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)


@pulumi.input_type
class CertificateSpecKeystoresArgs:
    def __init__(__self__, *,
                 jks: Optional[pulumi.Input['CertificateSpecKeystoresJksArgs']] = None,
                 pkcs12: Optional[pulumi.Input['CertificateSpecKeystoresPkcs12Args']] = None):
        """
        Keystores configures additional keystore output formats stored in the `secretName` Secret resource.
        :param pulumi.Input['CertificateSpecKeystoresJksArgs'] jks: JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
        :param pulumi.Input['CertificateSpecKeystoresPkcs12Args'] pkcs12: PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
        """
        if jks is not None:
            pulumi.set(__self__, "jks", jks)
        if pkcs12 is not None:
            pulumi.set(__self__, "pkcs12", pkcs12)

    @property
    @pulumi.getter
    def jks(self) -> Optional[pulumi.Input['CertificateSpecKeystoresJksArgs']]:
        """
        JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
        """
        return pulumi.get(self, "jks")

    @jks.setter
    def jks(self, value: Optional[pulumi.Input['CertificateSpecKeystoresJksArgs']]):
        pulumi.set(self, "jks", value)

    @property
    @pulumi.getter
    def pkcs12(self) -> Optional[pulumi.Input['CertificateSpecKeystoresPkcs12Args']]:
        """
        PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
        """
        return pulumi.get(self, "pkcs12")

    @pkcs12.setter
    def pkcs12(self, value: Optional[pulumi.Input['CertificateSpecKeystoresPkcs12Args']]):
        pulumi.set(self, "pkcs12", value)


@pulumi.input_type
class CertificateSpecKeystoresJksArgs:
    def __init__(__self__, *,
                 create: pulumi.Input[bool],
                 password_secret_ref: pulumi.Input['CertificateSpecKeystoresJksPasswordSecretRefArgs']):
        """
        JKS configures options for storing a JKS keystore in the `spec.secretName` Secret resource.
        :param pulumi.Input[bool] create: Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.
        :param pulumi.Input['CertificateSpecKeystoresJksPasswordSecretRefArgs'] password_secret_ref: PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
        """
        pulumi.set(__self__, "create", create)
        pulumi.set(__self__, "password_secret_ref", password_secret_ref)

    @property
    @pulumi.getter
    def create(self) -> pulumi.Input[bool]:
        """
        Create enables JKS keystore creation for the Certificate. If true, a file named `keystore.jks` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: pulumi.Input[bool]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter(name="passwordSecretRef")
    def password_secret_ref(self) -> pulumi.Input['CertificateSpecKeystoresJksPasswordSecretRefArgs']:
        """
        PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
        """
        return pulumi.get(self, "password_secret_ref")

    @password_secret_ref.setter
    def password_secret_ref(self, value: pulumi.Input['CertificateSpecKeystoresJksPasswordSecretRefArgs']):
        pulumi.set(self, "password_secret_ref", value)


@pulumi.input_type
class CertificateSpecKeystoresJksPasswordSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the JKS keystore.
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class CertificateSpecKeystoresPkcs12Args:
    def __init__(__self__, *,
                 create: pulumi.Input[bool],
                 password_secret_ref: pulumi.Input['CertificateSpecKeystoresPkcs12PasswordSecretRefArgs']):
        """
        PKCS12 configures options for storing a PKCS12 keystore in the `spec.secretName` Secret resource.
        :param pulumi.Input[bool] create: Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.
        :param pulumi.Input['CertificateSpecKeystoresPkcs12PasswordSecretRefArgs'] password_secret_ref: PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
        """
        pulumi.set(__self__, "create", create)
        pulumi.set(__self__, "password_secret_ref", password_secret_ref)

    @property
    @pulumi.getter
    def create(self) -> pulumi.Input[bool]:
        """
        Create enables PKCS12 keystore creation for the Certificate. If true, a file named `keystore.p12` will be created in the target Secret resource, encrypted using the password stored in `passwordSecretRef`. The keystore file will only be updated upon re-issuance.
        """
        return pulumi.get(self, "create")

    @create.setter
    def create(self, value: pulumi.Input[bool]):
        pulumi.set(self, "create", value)

    @property
    @pulumi.getter(name="passwordSecretRef")
    def password_secret_ref(self) -> pulumi.Input['CertificateSpecKeystoresPkcs12PasswordSecretRefArgs']:
        """
        PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
        """
        return pulumi.get(self, "password_secret_ref")

    @password_secret_ref.setter
    def password_secret_ref(self, value: pulumi.Input['CertificateSpecKeystoresPkcs12PasswordSecretRefArgs']):
        pulumi.set(self, "password_secret_ref", value)


@pulumi.input_type
class CertificateSpecKeystoresPkcs12PasswordSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        PasswordSecretRef is a reference to a key in a Secret resource containing the password used to encrypt the PKCS12 keystore.
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class CertificateSpecPrivateKeyArgs:
    def __init__(__self__, *,
                 rotation_policy: Optional[pulumi.Input[str]] = None):
        """
        Options to control private keys used for the Certificate.
        :param pulumi.Input[str] rotation_policy: RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.
        """
        if rotation_policy is not None:
            pulumi.set(__self__, "rotation_policy", rotation_policy)

    @property
    @pulumi.getter(name="rotationPolicy")
    def rotation_policy(self) -> Optional[pulumi.Input[str]]:
        """
        RotationPolicy controls how private keys should be regenerated when a re-issuance is being processed. If set to Never, a private key will only be generated if one does not already exist in the target `spec.secretName`. If one does exists but it does not have the correct algorithm or size, a warning will be raised to await user intervention. If set to Always, a private key matching the specified requirements will be generated whenever a re-issuance occurs. Default is 'Never' for backward compatibility.
        """
        return pulumi.get(self, "rotation_policy")

    @rotation_policy.setter
    def rotation_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "rotation_policy", value)


@pulumi.input_type
class CertificateSpecSubjectArgs:
    def __init__(__self__, *,
                 countries: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 localities: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 organizational_units: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 postal_codes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 provinces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 serial_number: Optional[pulumi.Input[str]] = None,
                 street_addresses: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
        :param pulumi.Input[Sequence[pulumi.Input[str]]] countries: Countries to be used on the Certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] localities: Cities to be used on the Certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] organizational_units: Organizational Units to be used on the Certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] postal_codes: Postal codes to be used on the Certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] provinces: State/Provinces to be used on the Certificate.
        :param pulumi.Input[str] serial_number: Serial number to be used on the Certificate.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] street_addresses: Street addresses to be used on the Certificate.
        """
        if countries is not None:
            pulumi.set(__self__, "countries", countries)
        if localities is not None:
            pulumi.set(__self__, "localities", localities)
        if organizational_units is not None:
            pulumi.set(__self__, "organizational_units", organizational_units)
        if postal_codes is not None:
            pulumi.set(__self__, "postal_codes", postal_codes)
        if provinces is not None:
            pulumi.set(__self__, "provinces", provinces)
        if serial_number is not None:
            pulumi.set(__self__, "serial_number", serial_number)
        if street_addresses is not None:
            pulumi.set(__self__, "street_addresses", street_addresses)

    @property
    @pulumi.getter
    def countries(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Countries to be used on the Certificate.
        """
        return pulumi.get(self, "countries")

    @countries.setter
    def countries(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "countries", value)

    @property
    @pulumi.getter
    def localities(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Cities to be used on the Certificate.
        """
        return pulumi.get(self, "localities")

    @localities.setter
    def localities(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "localities", value)

    @property
    @pulumi.getter(name="organizationalUnits")
    def organizational_units(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Organizational Units to be used on the Certificate.
        """
        return pulumi.get(self, "organizational_units")

    @organizational_units.setter
    def organizational_units(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "organizational_units", value)

    @property
    @pulumi.getter(name="postalCodes")
    def postal_codes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Postal codes to be used on the Certificate.
        """
        return pulumi.get(self, "postal_codes")

    @postal_codes.setter
    def postal_codes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "postal_codes", value)

    @property
    @pulumi.getter
    def provinces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        State/Provinces to be used on the Certificate.
        """
        return pulumi.get(self, "provinces")

    @provinces.setter
    def provinces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "provinces", value)

    @property
    @pulumi.getter(name="serialNumber")
    def serial_number(self) -> Optional[pulumi.Input[str]]:
        """
        Serial number to be used on the Certificate.
        """
        return pulumi.get(self, "serial_number")

    @serial_number.setter
    def serial_number(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "serial_number", value)

    @property
    @pulumi.getter(name="streetAddresses")
    def street_addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Street addresses to be used on the Certificate.
        """
        return pulumi.get(self, "street_addresses")

    @street_addresses.setter
    def street_addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "street_addresses", value)


@pulumi.input_type
class CertificateStatusArgs:
    def __init__(__self__, *,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['CertificateStatusConditionsArgs']]]] = None,
                 last_failure_time: Optional[pulumi.Input[str]] = None,
                 next_private_key_secret_name: Optional[pulumi.Input[str]] = None,
                 not_after: Optional[pulumi.Input[str]] = None,
                 not_before: Optional[pulumi.Input[str]] = None,
                 renewal_time: Optional[pulumi.Input[str]] = None,
                 revision: Optional[pulumi.Input[int]] = None):
        """
        Status of the Certificate. This is set and managed automatically.
        :param pulumi.Input[Sequence[pulumi.Input['CertificateStatusConditionsArgs']]] conditions: List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
        :param pulumi.Input[str] last_failure_time: LastFailureTime is the time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource. If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time.
        :param pulumi.Input[str] next_private_key_secret_name: The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
        :param pulumi.Input[str] not_after: The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
        :param pulumi.Input[str] not_before: The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.
        :param pulumi.Input[str] renewal_time: RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
        :param pulumi.Input[int] revision: The current 'revision' of the certificate as issued. 
                When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field. 
                Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate. 
                Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field.
        """
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)
        if last_failure_time is not None:
            pulumi.set(__self__, "last_failure_time", last_failure_time)
        if next_private_key_secret_name is not None:
            pulumi.set(__self__, "next_private_key_secret_name", next_private_key_secret_name)
        if not_after is not None:
            pulumi.set(__self__, "not_after", not_after)
        if not_before is not None:
            pulumi.set(__self__, "not_before", not_before)
        if renewal_time is not None:
            pulumi.set(__self__, "renewal_time", renewal_time)
        if revision is not None:
            pulumi.set(__self__, "revision", revision)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CertificateStatusConditionsArgs']]]]:
        """
        List of status conditions to indicate the status of certificates. Known condition types are `Ready` and `Issuing`.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CertificateStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)

    @property
    @pulumi.getter(name="lastFailureTime")
    def last_failure_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastFailureTime is the time as recorded by the Certificate controller of the most recent failure to complete a CertificateRequest for this Certificate resource. If set, cert-manager will not re-request another Certificate until 1 hour has elapsed from this time.
        """
        return pulumi.get(self, "last_failure_time")

    @last_failure_time.setter
    def last_failure_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_failure_time", value)

    @property
    @pulumi.getter(name="nextPrivateKeySecretName")
    def next_private_key_secret_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Secret resource containing the private key to be used for the next certificate iteration. The keymanager controller will automatically set this field if the `Issuing` condition is set to `True`. It will automatically unset this field when the Issuing condition is not set or False.
        """
        return pulumi.get(self, "next_private_key_secret_name")

    @next_private_key_secret_name.setter
    def next_private_key_secret_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_private_key_secret_name", value)

    @property
    @pulumi.getter(name="notAfter")
    def not_after(self) -> Optional[pulumi.Input[str]]:
        """
        The expiration time of the certificate stored in the secret named by this resource in `spec.secretName`.
        """
        return pulumi.get(self, "not_after")

    @not_after.setter
    def not_after(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "not_after", value)

    @property
    @pulumi.getter(name="notBefore")
    def not_before(self) -> Optional[pulumi.Input[str]]:
        """
        The time after which the certificate stored in the secret named by this resource in spec.secretName is valid.
        """
        return pulumi.get(self, "not_before")

    @not_before.setter
    def not_before(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "not_before", value)

    @property
    @pulumi.getter(name="renewalTime")
    def renewal_time(self) -> Optional[pulumi.Input[str]]:
        """
        RenewalTime is the time at which the certificate will be next renewed. If not set, no upcoming renewal is scheduled.
        """
        return pulumi.get(self, "renewal_time")

    @renewal_time.setter
    def renewal_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "renewal_time", value)

    @property
    @pulumi.getter
    def revision(self) -> Optional[pulumi.Input[int]]:
        """
        The current 'revision' of the certificate as issued. 
         When a CertificateRequest resource is created, it will have the `cert-manager.io/certificate-revision` set to one greater than the current value of this field. 
         Upon issuance, this field will be set to the value of the annotation on the CertificateRequest resource used to issue the certificate. 
         Persisting the value on the CertificateRequest resource allows the certificates controller to know whether a request is part of an old issuance or if it is part of the ongoing revision's issuance by checking if the revision value in the annotation is greater than this field.
        """
        return pulumi.get(self, "revision")

    @revision.setter
    def revision(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "revision", value)


@pulumi.input_type
class CertificateStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 observed_generation: Optional[pulumi.Input[int]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        CertificateCondition contains condition information for an Certificate.
        :param pulumi.Input[str] status: Status of the condition, one of (`True`, `False`, `Unknown`).
        :param pulumi.Input[str] type: Type of the condition, known values are (`Ready`, `Issuing`).
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the timestamp corresponding to the last status change of this condition.
        :param pulumi.Input[str] message: Message is a human readable description of the details of the last transition, complementing reason.
        :param pulumi.Input[int] observed_generation: If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Certificate.
        :param pulumi.Input[str] reason: Reason is a brief machine readable explanation for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of (`True`, `False`, `Unknown`).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the condition, known values are (`Ready`, `Issuing`).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the timestamp corresponding to the last status change of this condition.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message is a human readable description of the details of the last transition, complementing reason.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        """
        If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Certificate.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason is a brief machine readable explanation for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


