# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables

__all__ = [
    'ClusterIssuerSpecArgs',
    'ClusterIssuerSpecAcmeArgs',
    'ClusterIssuerSpecAcmeExternalAccountBindingArgs',
    'ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgs',
    'ClusterIssuerSpecAcmePrivateKeySecretRefArgs',
    'ClusterIssuerSpecAcmeSolversArgs',
    'ClusterIssuerSpecAcmeSolversDns01Args',
    'ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgs',
    'ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs',
    'ClusterIssuerSpecAcmeSolversDns01AkamaiArgs',
    'ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs',
    'ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs',
    'ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs',
    'ClusterIssuerSpecAcmeSolversDns01AzureDNSArgs',
    'ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs',
    'ClusterIssuerSpecAcmeSolversDns01CloudDNSArgs',
    'ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs',
    'ClusterIssuerSpecAcmeSolversDns01CloudflareArgs',
    'ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs',
    'ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs',
    'ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgs',
    'ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs',
    'ClusterIssuerSpecAcmeSolversDns01Rfc2136Args',
    'ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs',
    'ClusterIssuerSpecAcmeSolversDns01Route53Args',
    'ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs',
    'ClusterIssuerSpecAcmeSolversDns01WebhookArgs',
    'ClusterIssuerSpecAcmeSolversHttp01Args',
    'ClusterIssuerSpecAcmeSolversHttp01IngressArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs',
    'ClusterIssuerSpecAcmeSolversSelectorArgs',
    'ClusterIssuerSpecCaArgs',
    'ClusterIssuerSpecSelfSignedArgs',
    'ClusterIssuerSpecVaultArgs',
    'ClusterIssuerSpecVaultAuthArgs',
    'ClusterIssuerSpecVaultAuthAppRoleArgs',
    'ClusterIssuerSpecVaultAuthAppRoleSecretRefArgs',
    'ClusterIssuerSpecVaultAuthKubernetesArgs',
    'ClusterIssuerSpecVaultAuthKubernetesSecretRefArgs',
    'ClusterIssuerSpecVaultAuthTokenSecretRefArgs',
    'ClusterIssuerSpecVenafiArgs',
    'ClusterIssuerSpecVenafiCloudArgs',
    'ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgs',
    'ClusterIssuerSpecVenafiTppArgs',
    'ClusterIssuerSpecVenafiTppCredentialsRefArgs',
    'ClusterIssuerStatusArgs',
    'ClusterIssuerStatusAcmeArgs',
    'ClusterIssuerStatusConditionsArgs',
]

@pulumi.input_type
class ClusterIssuerSpecArgs:
    def __init__(__self__, *,
                 acme: Optional[pulumi.Input['ClusterIssuerSpecAcmeArgs']] = None,
                 ca: Optional[pulumi.Input['ClusterIssuerSpecCaArgs']] = None,
                 self_signed: Optional[pulumi.Input['ClusterIssuerSpecSelfSignedArgs']] = None,
                 vault: Optional[pulumi.Input['ClusterIssuerSpecVaultArgs']] = None,
                 venafi: Optional[pulumi.Input['ClusterIssuerSpecVenafiArgs']] = None):
        """
        Desired state of the ClusterIssuer resource.
        :param pulumi.Input['ClusterIssuerSpecAcmeArgs'] acme: ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
        :param pulumi.Input['ClusterIssuerSpecCaArgs'] ca: CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
        :param pulumi.Input['ClusterIssuerSpecSelfSignedArgs'] self_signed: SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
        :param pulumi.Input['ClusterIssuerSpecVaultArgs'] vault: Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
        :param pulumi.Input['ClusterIssuerSpecVenafiArgs'] venafi: Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
        """
        if acme is not None:
            pulumi.set(__self__, "acme", acme)
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if self_signed is not None:
            pulumi.set(__self__, "self_signed", self_signed)
        if vault is not None:
            pulumi.set(__self__, "vault", vault)
        if venafi is not None:
            pulumi.set(__self__, "venafi", venafi)

    @property
    @pulumi.getter
    def acme(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeArgs']]:
        """
        ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
        """
        return pulumi.get(self, "acme")

    @acme.setter
    def acme(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeArgs']]):
        pulumi.set(self, "acme", value)

    @property
    @pulumi.getter
    def ca(self) -> Optional[pulumi.Input['ClusterIssuerSpecCaArgs']]:
        """
        CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
        """
        return pulumi.get(self, "ca")

    @ca.setter
    def ca(self, value: Optional[pulumi.Input['ClusterIssuerSpecCaArgs']]):
        pulumi.set(self, "ca", value)

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional[pulumi.Input['ClusterIssuerSpecSelfSignedArgs']]:
        """
        SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
        """
        return pulumi.get(self, "self_signed")

    @self_signed.setter
    def self_signed(self, value: Optional[pulumi.Input['ClusterIssuerSpecSelfSignedArgs']]):
        pulumi.set(self, "self_signed", value)

    @property
    @pulumi.getter
    def vault(self) -> Optional[pulumi.Input['ClusterIssuerSpecVaultArgs']]:
        """
        Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
        """
        return pulumi.get(self, "vault")

    @vault.setter
    def vault(self, value: Optional[pulumi.Input['ClusterIssuerSpecVaultArgs']]):
        pulumi.set(self, "vault", value)

    @property
    @pulumi.getter
    def venafi(self) -> Optional[pulumi.Input['ClusterIssuerSpecVenafiArgs']]:
        """
        Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
        """
        return pulumi.get(self, "venafi")

    @venafi.setter
    def venafi(self, value: Optional[pulumi.Input['ClusterIssuerSpecVenafiArgs']]):
        pulumi.set(self, "venafi", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeArgs:
    def __init__(__self__, *,
                 private_key_secret_ref: pulumi.Input['ClusterIssuerSpecAcmePrivateKeySecretRefArgs'],
                 server: pulumi.Input[str],
                 disable_account_key_generation: Optional[pulumi.Input[bool]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 enable_duration_feature: Optional[pulumi.Input[bool]] = None,
                 external_account_binding: Optional[pulumi.Input['ClusterIssuerSpecAcmeExternalAccountBindingArgs']] = None,
                 preferred_chain: Optional[pulumi.Input[str]] = None,
                 skip_tls_verify: Optional[pulumi.Input[bool]] = None,
                 solvers: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversArgs']]]] = None):
        """
        ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
        :param pulumi.Input['ClusterIssuerSpecAcmePrivateKeySecretRefArgs'] private_key_secret_ref: PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
        :param pulumi.Input[str] server: Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
        :param pulumi.Input[bool] disable_account_key_generation: Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
        :param pulumi.Input[str] email: Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
        :param pulumi.Input[bool] enable_duration_feature: Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
        :param pulumi.Input['ClusterIssuerSpecAcmeExternalAccountBindingArgs'] external_account_binding: ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
        :param pulumi.Input[str] preferred_chain: PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
        :param pulumi.Input[bool] skip_tls_verify: Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have their TLS certificate validated (i.e. insecure connections will be allowed). Only enable this option in development environments. The cert-manager system installed roots will be used to verify connections to the ACME server if this is false. Defaults to false.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversArgs']]] solvers: Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
        """
        pulumi.set(__self__, "private_key_secret_ref", private_key_secret_ref)
        pulumi.set(__self__, "server", server)
        if disable_account_key_generation is not None:
            pulumi.set(__self__, "disable_account_key_generation", disable_account_key_generation)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if enable_duration_feature is not None:
            pulumi.set(__self__, "enable_duration_feature", enable_duration_feature)
        if external_account_binding is not None:
            pulumi.set(__self__, "external_account_binding", external_account_binding)
        if preferred_chain is not None:
            pulumi.set(__self__, "preferred_chain", preferred_chain)
        if skip_tls_verify is not None:
            pulumi.set(__self__, "skip_tls_verify", skip_tls_verify)
        if solvers is not None:
            pulumi.set(__self__, "solvers", solvers)

    @property
    @pulumi.getter(name="privateKeySecretRef")
    def private_key_secret_ref(self) -> pulumi.Input['ClusterIssuerSpecAcmePrivateKeySecretRefArgs']:
        """
        PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
        """
        return pulumi.get(self, "private_key_secret_ref")

    @private_key_secret_ref.setter
    def private_key_secret_ref(self, value: pulumi.Input['ClusterIssuerSpecAcmePrivateKeySecretRefArgs']):
        pulumi.set(self, "private_key_secret_ref", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="disableAccountKeyGeneration")
    def disable_account_key_generation(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
        """
        return pulumi.get(self, "disable_account_key_generation")

    @disable_account_key_generation.setter
    def disable_account_key_generation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_account_key_generation", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="enableDurationFeature")
    def enable_duration_feature(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
        """
        return pulumi.get(self, "enable_duration_feature")

    @enable_duration_feature.setter
    def enable_duration_feature(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_duration_feature", value)

    @property
    @pulumi.getter(name="externalAccountBinding")
    def external_account_binding(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeExternalAccountBindingArgs']]:
        """
        ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
        """
        return pulumi.get(self, "external_account_binding")

    @external_account_binding.setter
    def external_account_binding(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeExternalAccountBindingArgs']]):
        pulumi.set(self, "external_account_binding", value)

    @property
    @pulumi.getter(name="preferredChain")
    def preferred_chain(self) -> Optional[pulumi.Input[str]]:
        """
        PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
        """
        return pulumi.get(self, "preferred_chain")

    @preferred_chain.setter
    def preferred_chain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preferred_chain", value)

    @property
    @pulumi.getter(name="skipTLSVerify")
    def skip_tls_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have their TLS certificate validated (i.e. insecure connections will be allowed). Only enable this option in development environments. The cert-manager system installed roots will be used to verify connections to the ACME server if this is false. Defaults to false.
        """
        return pulumi.get(self, "skip_tls_verify")

    @skip_tls_verify.setter
    def skip_tls_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "skip_tls_verify", value)

    @property
    @pulumi.getter
    def solvers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversArgs']]]]:
        """
        Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
        """
        return pulumi.get(self, "solvers")

    @solvers.setter
    def solvers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversArgs']]]]):
        pulumi.set(self, "solvers", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeExternalAccountBindingArgs:
    def __init__(__self__, *,
                 key_algorithm: pulumi.Input[str],
                 key_id: pulumi.Input[str],
                 key_secret_ref: pulumi.Input['ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgs']):
        """
        ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
        :param pulumi.Input[str] key_algorithm: keyAlgorithm is the MAC key algorithm that the key is used for. Valid values are "HS256", "HS384" and "HS512".
        :param pulumi.Input[str] key_id: keyID is the ID of the CA key that the External Account is bound to.
        :param pulumi.Input['ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgs'] key_secret_ref: keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
        """
        pulumi.set(__self__, "key_algorithm", key_algorithm)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "key_secret_ref", key_secret_ref)

    @property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> pulumi.Input[str]:
        """
        keyAlgorithm is the MAC key algorithm that the key is used for. Valid values are "HS256", "HS384" and "HS512".
        """
        return pulumi.get(self, "key_algorithm")

    @key_algorithm.setter
    def key_algorithm(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_algorithm", value)

    @property
    @pulumi.getter(name="keyID")
    def key_id(self) -> pulumi.Input[str]:
        """
        keyID is the ID of the CA key that the External Account is bound to.
        """
        return pulumi.get(self, "key_id")

    @key_id.setter
    def key_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "key_id", value)

    @property
    @pulumi.getter(name="keySecretRef")
    def key_secret_ref(self) -> pulumi.Input['ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgs']:
        """
        keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
        """
        return pulumi.get(self, "key_secret_ref")

    @key_secret_ref.setter
    def key_secret_ref(self, value: pulumi.Input['ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgs']):
        pulumi.set(self, "key_secret_ref", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ClusterIssuerSpecAcmePrivateKeySecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversArgs:
    def __init__(__self__, *,
                 dns01: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Args']] = None,
                 http01: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01Args']] = None,
                 selector: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversSelectorArgs']] = None):
        """
        Configures an issuer to solve challenges using the specified options. Only one of HTTP01 or DNS01 may be provided.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Args'] dns01: Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01Args'] http01: Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversSelectorArgs'] selector: Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
        """
        if dns01 is not None:
            pulumi.set(__self__, "dns01", dns01)
        if http01 is not None:
            pulumi.set(__self__, "http01", http01)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def dns01(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Args']]:
        """
        Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
        """
        return pulumi.get(self, "dns01")

    @dns01.setter
    def dns01(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Args']]):
        pulumi.set(self, "dns01", value)

    @property
    @pulumi.getter
    def http01(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01Args']]:
        """
        Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        """
        return pulumi.get(self, "http01")

    @http01.setter
    def http01(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01Args']]):
        pulumi.set(self, "http01", value)

    @property
    @pulumi.getter
    def selector(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversSelectorArgs']]:
        """
        Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
        """
        return pulumi.get(self, "selector")

    @selector.setter
    def selector(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversSelectorArgs']]):
        pulumi.set(self, "selector", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Args:
    def __init__(__self__, *,
                 acme_dns: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgs']] = None,
                 akamai: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AkamaiArgs']] = None,
                 azure_dns: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AzureDNSArgs']] = None,
                 cloud_dns: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudDNSArgs']] = None,
                 cloudflare: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudflareArgs']] = None,
                 cname_strategy: Optional[pulumi.Input[str]] = None,
                 digitalocean: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgs']] = None,
                 rfc2136: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Rfc2136Args']] = None,
                 route53: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Route53Args']] = None,
                 webhook: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01WebhookArgs']] = None):
        """
        Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgs'] acme_dns: Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AkamaiArgs'] akamai: Use the Akamai DNS zone management API to manage DNS01 challenge records.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AzureDNSArgs'] azure_dns: Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudDNSArgs'] cloud_dns: Use the Google Cloud DNS API to manage DNS01 challenge records.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudflareArgs'] cloudflare: Use the Cloudflare API to manage DNS01 challenge records.
        :param pulumi.Input[str] cname_strategy: CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgs'] digitalocean: Use the DigitalOcean DNS API to manage DNS01 challenge records.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Rfc2136Args'] rfc2136: Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Route53Args'] route53: Use the AWS Route53 API to manage DNS01 challenge records.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01WebhookArgs'] webhook: Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
        """
        if acme_dns is not None:
            pulumi.set(__self__, "acme_dns", acme_dns)
        if akamai is not None:
            pulumi.set(__self__, "akamai", akamai)
        if azure_dns is not None:
            pulumi.set(__self__, "azure_dns", azure_dns)
        if cloud_dns is not None:
            pulumi.set(__self__, "cloud_dns", cloud_dns)
        if cloudflare is not None:
            pulumi.set(__self__, "cloudflare", cloudflare)
        if cname_strategy is not None:
            pulumi.set(__self__, "cname_strategy", cname_strategy)
        if digitalocean is not None:
            pulumi.set(__self__, "digitalocean", digitalocean)
        if rfc2136 is not None:
            pulumi.set(__self__, "rfc2136", rfc2136)
        if route53 is not None:
            pulumi.set(__self__, "route53", route53)
        if webhook is not None:
            pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter(name="acmeDNS")
    def acme_dns(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgs']]:
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "acme_dns")

    @acme_dns.setter
    def acme_dns(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgs']]):
        pulumi.set(self, "acme_dns", value)

    @property
    @pulumi.getter
    def akamai(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AkamaiArgs']]:
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "akamai")

    @akamai.setter
    def akamai(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AkamaiArgs']]):
        pulumi.set(self, "akamai", value)

    @property
    @pulumi.getter(name="azureDNS")
    def azure_dns(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AzureDNSArgs']]:
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "azure_dns")

    @azure_dns.setter
    def azure_dns(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AzureDNSArgs']]):
        pulumi.set(self, "azure_dns", value)

    @property
    @pulumi.getter(name="cloudDNS")
    def cloud_dns(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudDNSArgs']]:
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "cloud_dns")

    @cloud_dns.setter
    def cloud_dns(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudDNSArgs']]):
        pulumi.set(self, "cloud_dns", value)

    @property
    @pulumi.getter
    def cloudflare(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudflareArgs']]:
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "cloudflare")

    @cloudflare.setter
    def cloudflare(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudflareArgs']]):
        pulumi.set(self, "cloudflare", value)

    @property
    @pulumi.getter(name="cnameStrategy")
    def cname_strategy(self) -> Optional[pulumi.Input[str]]:
        """
        CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
        """
        return pulumi.get(self, "cname_strategy")

    @cname_strategy.setter
    def cname_strategy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cname_strategy", value)

    @property
    @pulumi.getter
    def digitalocean(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgs']]:
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "digitalocean")

    @digitalocean.setter
    def digitalocean(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgs']]):
        pulumi.set(self, "digitalocean", value)

    @property
    @pulumi.getter
    def rfc2136(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Rfc2136Args']]:
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
        """
        return pulumi.get(self, "rfc2136")

    @rfc2136.setter
    def rfc2136(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Rfc2136Args']]):
        pulumi.set(self, "rfc2136", value)

    @property
    @pulumi.getter
    def route53(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Route53Args']]:
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "route53")

    @route53.setter
    def route53(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Route53Args']]):
        pulumi.set(self, "route53", value)

    @property
    @pulumi.getter
    def webhook(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01WebhookArgs']]:
        """
        Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
        """
        return pulumi.get(self, "webhook")

    @webhook.setter
    def webhook(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01WebhookArgs']]):
        pulumi.set(self, "webhook", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgs:
    def __init__(__self__, *,
                 account_secret_ref: pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs'],
                 host: pulumi.Input[str]):
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs'] account_secret_ref: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        pulumi.set(__self__, "account_secret_ref", account_secret_ref)
        pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter(name="accountSecretRef")
    def account_secret_ref(self) -> pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs']:
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        return pulumi.get(self, "account_secret_ref")

    @account_secret_ref.setter
    def account_secret_ref(self, value: pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs']):
        pulumi.set(self, "account_secret_ref", value)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AkamaiArgs:
    def __init__(__self__, *,
                 access_token_secret_ref: pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs'],
                 client_secret_secret_ref: pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs'],
                 client_token_secret_ref: pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs'],
                 service_consumer_domain: pulumi.Input[str]):
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs'] access_token_secret_ref: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs'] client_secret_secret_ref: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs'] client_token_secret_ref: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        pulumi.set(__self__, "access_token_secret_ref", access_token_secret_ref)
        pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        pulumi.set(__self__, "client_token_secret_ref", client_token_secret_ref)
        pulumi.set(__self__, "service_consumer_domain", service_consumer_domain)

    @property
    @pulumi.getter(name="accessTokenSecretRef")
    def access_token_secret_ref(self) -> pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs']:
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        return pulumi.get(self, "access_token_secret_ref")

    @access_token_secret_ref.setter
    def access_token_secret_ref(self, value: pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs']):
        pulumi.set(self, "access_token_secret_ref", value)

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(self) -> pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs']:
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        return pulumi.get(self, "client_secret_secret_ref")

    @client_secret_secret_ref.setter
    def client_secret_secret_ref(self, value: pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs']):
        pulumi.set(self, "client_secret_secret_ref", value)

    @property
    @pulumi.getter(name="clientTokenSecretRef")
    def client_token_secret_ref(self) -> pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs']:
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        return pulumi.get(self, "client_token_secret_ref")

    @client_token_secret_ref.setter
    def client_token_secret_ref(self, value: pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs']):
        pulumi.set(self, "client_token_secret_ref", value)

    @property
    @pulumi.getter(name="serviceConsumerDomain")
    def service_consumer_domain(self) -> pulumi.Input[str]:
        return pulumi.get(self, "service_consumer_domain")

    @service_consumer_domain.setter
    def service_consumer_domain(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_consumer_domain", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AzureDNSArgs:
    def __init__(__self__, *,
                 resource_group_name: pulumi.Input[str],
                 subscription_id: pulumi.Input[str],
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret_secret_ref: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs']] = None,
                 environment: Optional[pulumi.Input[str]] = None,
                 hosted_zone_name: Optional[pulumi.Input[str]] = None,
                 tenant_id: Optional[pulumi.Input[str]] = None):
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        :param pulumi.Input[str] client_id: if both this and ClientSecret are left unset MSI will be used
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs'] client_secret_secret_ref: if both this and ClientID are left unset MSI will be used
        :param pulumi.Input[str] tenant_id: when specifying ClientID and ClientSecret then this field is also needed
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "subscription_id", subscription_id)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "resource_group_name")

    @resource_group_name.setter
    def resource_group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "resource_group_name", value)

    @property
    @pulumi.getter(name="subscriptionID")
    def subscription_id(self) -> pulumi.Input[str]:
        return pulumi.get(self, "subscription_id")

    @subscription_id.setter
    def subscription_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "subscription_id", value)

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        if both this and ClientSecret are left unset MSI will be used
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs']]:
        """
        if both this and ClientID are left unset MSI will be used
        """
        return pulumi.get(self, "client_secret_secret_ref")

    @client_secret_secret_ref.setter
    def client_secret_secret_ref(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs']]):
        pulumi.set(self, "client_secret_secret_ref", value)

    @property
    @pulumi.getter
    def environment(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "environment")

    @environment.setter
    def environment(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "environment", value)

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "hosted_zone_name")

    @hosted_zone_name.setter
    def hosted_zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_name", value)

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[pulumi.Input[str]]:
        """
        when specifying ClientID and ClientSecret then this field is also needed
        """
        return pulumi.get(self, "tenant_id")

    @tenant_id.setter
    def tenant_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tenant_id", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        if both this and ClientID are left unset MSI will be used
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01CloudDNSArgs:
    def __init__(__self__, *,
                 project: pulumi.Input[str],
                 hosted_zone_name: Optional[pulumi.Input[str]] = None,
                 service_account_secret_ref: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs']] = None):
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        :param pulumi.Input[str] hosted_zone_name: HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs'] service_account_secret_ref: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        pulumi.set(__self__, "project", project)
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if service_account_secret_ref is not None:
            pulumi.set(__self__, "service_account_secret_ref", service_account_secret_ref)

    @property
    @pulumi.getter
    def project(self) -> pulumi.Input[str]:
        return pulumi.get(self, "project")

    @project.setter
    def project(self, value: pulumi.Input[str]):
        pulumi.set(self, "project", value)

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[pulumi.Input[str]]:
        """
        HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
        """
        return pulumi.get(self, "hosted_zone_name")

    @hosted_zone_name.setter
    def hosted_zone_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_name", value)

    @property
    @pulumi.getter(name="serviceAccountSecretRef")
    def service_account_secret_ref(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs']]:
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        return pulumi.get(self, "service_account_secret_ref")

    @service_account_secret_ref.setter
    def service_account_secret_ref(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs']]):
        pulumi.set(self, "service_account_secret_ref", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01CloudflareArgs:
    def __init__(__self__, *,
                 api_key_secret_ref: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs']] = None,
                 api_token_secret_ref: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs']] = None,
                 email: Optional[pulumi.Input[str]] = None):
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs'] api_key_secret_ref: API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs'] api_token_secret_ref: API token used to authenticate with Cloudflare.
        :param pulumi.Input[str] email: Email of the account, only required when using API key based authentication.
        """
        if api_key_secret_ref is not None:
            pulumi.set(__self__, "api_key_secret_ref", api_key_secret_ref)
        if api_token_secret_ref is not None:
            pulumi.set(__self__, "api_token_secret_ref", api_token_secret_ref)
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter(name="apiKeySecretRef")
    def api_key_secret_ref(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs']]:
        """
        API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
        """
        return pulumi.get(self, "api_key_secret_ref")

    @api_key_secret_ref.setter
    def api_key_secret_ref(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs']]):
        pulumi.set(self, "api_key_secret_ref", value)

    @property
    @pulumi.getter(name="apiTokenSecretRef")
    def api_token_secret_ref(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs']]:
        """
        API token used to authenticate with Cloudflare.
        """
        return pulumi.get(self, "api_token_secret_ref")

    @api_token_secret_ref.setter
    def api_token_secret_ref(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs']]):
        pulumi.set(self, "api_token_secret_ref", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        Email of the account, only required when using API key based authentication.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        API token used to authenticate with Cloudflare.
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgs:
    def __init__(__self__, *,
                 token_secret_ref: pulumi.Input['ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs']):
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs'] token_secret_ref: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        pulumi.set(__self__, "token_secret_ref", token_secret_ref)

    @property
    @pulumi.getter(name="tokenSecretRef")
    def token_secret_ref(self) -> pulumi.Input['ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs']:
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        return pulumi.get(self, "token_secret_ref")

    @token_secret_ref.setter
    def token_secret_ref(self, value: pulumi.Input['ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs']):
        pulumi.set(self, "token_secret_ref", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Rfc2136Args:
    def __init__(__self__, *,
                 nameserver: pulumi.Input[str],
                 tsig_algorithm: Optional[pulumi.Input[str]] = None,
                 tsig_key_name: Optional[pulumi.Input[str]] = None,
                 tsig_secret_secret_ref: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs']] = None):
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
        :param pulumi.Input[str] nameserver: The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
        :param pulumi.Input[str] tsig_algorithm: The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        :param pulumi.Input[str] tsig_key_name: The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs'] tsig_secret_secret_ref: The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
        """
        pulumi.set(__self__, "nameserver", nameserver)
        if tsig_algorithm is not None:
            pulumi.set(__self__, "tsig_algorithm", tsig_algorithm)
        if tsig_key_name is not None:
            pulumi.set(__self__, "tsig_key_name", tsig_key_name)
        if tsig_secret_secret_ref is not None:
            pulumi.set(__self__, "tsig_secret_secret_ref", tsig_secret_secret_ref)

    @property
    @pulumi.getter
    def nameserver(self) -> pulumi.Input[str]:
        """
        The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
        """
        return pulumi.get(self, "nameserver")

    @nameserver.setter
    def nameserver(self, value: pulumi.Input[str]):
        pulumi.set(self, "nameserver", value)

    @property
    @pulumi.getter(name="tsigAlgorithm")
    def tsig_algorithm(self) -> Optional[pulumi.Input[str]]:
        """
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        """
        return pulumi.get(self, "tsig_algorithm")

    @tsig_algorithm.setter
    def tsig_algorithm(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsig_algorithm", value)

    @property
    @pulumi.getter(name="tsigKeyName")
    def tsig_key_name(self) -> Optional[pulumi.Input[str]]:
        """
        The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        return pulumi.get(self, "tsig_key_name")

    @tsig_key_name.setter
    def tsig_key_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tsig_key_name", value)

    @property
    @pulumi.getter(name="tsigSecretSecretRef")
    def tsig_secret_secret_ref(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs']]:
        """
        The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
        """
        return pulumi.get(self, "tsig_secret_secret_ref")

    @tsig_secret_secret_ref.setter
    def tsig_secret_secret_ref(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs']]):
        pulumi.set(self, "tsig_secret_secret_ref", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Route53Args:
    def __init__(__self__, *,
                 region: pulumi.Input[str],
                 access_key_id: Optional[pulumi.Input[str]] = None,
                 hosted_zone_id: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 secret_access_key_secret_ref: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs']] = None):
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        :param pulumi.Input[str] region: Always set the region when using AccessKeyID and SecretAccessKey
        :param pulumi.Input[str] access_key_id: The AccessKeyID is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] hosted_zone_id: If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
        :param pulumi.Input[str] role: Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs'] secret_access_key_secret_ref: The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        pulumi.set(__self__, "region", region)
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if hosted_zone_id is not None:
            pulumi.set(__self__, "hosted_zone_id", hosted_zone_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_access_key_secret_ref is not None:
            pulumi.set(__self__, "secret_access_key_secret_ref", secret_access_key_secret_ref)

    @property
    @pulumi.getter
    def region(self) -> pulumi.Input[str]:
        """
        Always set the region when using AccessKeyID and SecretAccessKey
        """
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: pulumi.Input[str]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="accessKeyID")
    def access_key_id(self) -> Optional[pulumi.Input[str]]:
        """
        The AccessKeyID is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        return pulumi.get(self, "access_key_id")

    @access_key_id.setter
    def access_key_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_key_id", value)

    @property
    @pulumi.getter(name="hostedZoneID")
    def hosted_zone_id(self) -> Optional[pulumi.Input[str]]:
        """
        If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
        """
        return pulumi.get(self, "hosted_zone_id")

    @hosted_zone_id.setter
    def hosted_zone_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hosted_zone_id", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        """
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="secretAccessKeySecretRef")
    def secret_access_key_secret_ref(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs']]:
        """
        The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        return pulumi.get(self, "secret_access_key_secret_ref")

    @secret_access_key_secret_ref.setter
    def secret_access_key_secret_ref(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs']]):
        pulumi.set(self, "secret_access_key_secret_ref", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversDns01WebhookArgs:
    def __init__(__self__, *,
                 group_name: pulumi.Input[str],
                 solver_name: pulumi.Input[str],
                 config: Optional[pulumi.Input[Mapping[str, Any]]] = None):
        """
        Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
        :param pulumi.Input[str] group_name: The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
        :param pulumi.Input[str] solver_name: The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
        :param pulumi.Input[Mapping[str, Any]] config: Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "solver_name", solver_name)
        if config is not None:
            pulumi.set(__self__, "config", config)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> pulumi.Input[str]:
        """
        The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
        """
        return pulumi.get(self, "group_name")

    @group_name.setter
    def group_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "group_name", value)

    @property
    @pulumi.getter(name="solverName")
    def solver_name(self) -> pulumi.Input[str]:
        """
        The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        return pulumi.get(self, "solver_name")

    @solver_name.setter
    def solver_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "solver_name", value)

    @property
    @pulumi.getter
    def config(self) -> Optional[pulumi.Input[Mapping[str, Any]]]:
        """
        Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
        """
        return pulumi.get(self, "config")

    @config.setter
    def config(self, value: Optional[pulumi.Input[Mapping[str, Any]]]):
        pulumi.set(self, "config", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01Args:
    def __init__(__self__, *,
                 ingress: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressArgs']] = None):
        """
        Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressArgs'] ingress: The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
        """
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter
    def ingress(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressArgs']]:
        """
        The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
        """
        return pulumi.get(self, "ingress")

    @ingress.setter
    def ingress(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressArgs']]):
        pulumi.set(self, "ingress", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressArgs:
    def __init__(__self__, *,
                 class_: Optional[pulumi.Input[str]] = None,
                 ingress_template: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 pod_template: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgs']] = None,
                 service_type: Optional[pulumi.Input[str]] = None):
        """
        The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
        :param pulumi.Input[str] class_: The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs'] ingress_template: Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges
        :param pulumi.Input[str] name: The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgs'] pod_template: Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges
        :param pulumi.Input[str] service_type: Optional service type for Kubernetes solver service
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if ingress_template is not None:
            pulumi.set(__self__, "ingress_template", ingress_template)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[pulumi.Input[str]]:
        """
        The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
        """
        return pulumi.get(self, "class_")

    @class_.setter
    def class_(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "class_", value)

    @property
    @pulumi.getter(name="ingressTemplate")
    def ingress_template(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs']]:
        """
        Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges
        """
        return pulumi.get(self, "ingress_template")

    @ingress_template.setter
    def ingress_template(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs']]):
        pulumi.set(self, "ingress_template", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgs']]:
        """
        Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges
        """
        return pulumi.get(self, "pod_template")

    @pod_template.setter
    def pod_template(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgs']]):
        pulumi.set(self, "pod_template", value)

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[pulumi.Input[str]]:
        """
        Optional service type for Kubernetes solver service
        """
        return pulumi.get(self, "service_type")

    @service_type.setter
    def service_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_type", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs']] = None):
        """
        Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs'] metadata: ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs']]:
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs']]):
        pulumi.set(self, "metadata", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the created ACME HTTP01 solver ingress.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgs:
    def __init__(__self__, *,
                 metadata: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs']] = None,
                 spec: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs']] = None):
        """
        Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs'] metadata: ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs'] spec: PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs']]:
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs']]:
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
        """
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs']]):
        pulumi.set(self, "spec", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs:
    def __init__(__self__, *,
                 annotations: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] annotations: Annotations that should be added to the create ACME HTTP01 solver pods.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Annotations that should be added to the create ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @annotations.setter
    def annotations(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "annotations", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs:
    def __init__(__self__, *,
                 affinity: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs']] = None,
                 node_selector: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 priority_class_name: Optional[pulumi.Input[str]] = None,
                 service_account_name: Optional[pulumi.Input[str]] = None,
                 tolerations: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs']]]] = None):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs'] affinity: If specified, the pod's scheduling constraints
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param pulumi.Input[str] priority_class_name: If specified, the pod's priorityClassName.
        :param pulumi.Input[str] service_account_name: If specified, the pod's service account
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs']]] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs']]:
        """
        If specified, the pod's scheduling constraints
        """
        return pulumi.get(self, "affinity")

    @affinity.setter
    def affinity(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs']]):
        pulumi.set(self, "affinity", value)

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @node_selector.setter
    def node_selector(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "node_selector", value)

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @priority_class_name.setter
    def priority_class_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "priority_class_name", value)

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[pulumi.Input[str]]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @service_account_name.setter
    def service_account_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account_name", value)

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs']]]]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    @tolerations.setter
    def tolerations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs']]]]):
        pulumi.set(self, "tolerations", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs:
    def __init__(__self__, *,
                 node_affinity: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs']] = None,
                 pod_affinity: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs']] = None,
                 pod_anti_affinity: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs']] = None):
        """
        If specified, the pod's scheduling constraints
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs'] node_affinity: Describes node affinity scheduling rules for the pod.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs'] pod_affinity: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs'] pod_anti_affinity: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs']]:
        """
        Describes node affinity scheduling rules for the pod.
        """
        return pulumi.get(self, "node_affinity")

    @node_affinity.setter
    def node_affinity(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs']]):
        pulumi.set(self, "node_affinity", value)

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs']]:
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """
        return pulumi.get(self, "pod_affinity")

    @pod_affinity.setter
    def pod_affinity(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs']]):
        pulumi.set(self, "pod_affinity", value)

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs']]:
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """
        return pulumi.get(self, "pod_anti_affinity")

    @pod_anti_affinity.setter
    def pod_anti_affinity(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs']]):
        pulumi.set(self, "pod_anti_affinity", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_execution: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']] = None):
        """
        Describes node affinity scheduling rules for the pod.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs'] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 preference: pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs'],
                 weight: pulumi.Input[int]):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs'] preference: A node selector term, associated with the corresponding weight.
        :param pulumi.Input[int] weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs']:
        """
        A node selector term, associated with the corresponding weight.
        """
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs']):
        pulumi.set(self, "preference", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]]] = None,
                 match_fields: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]]] = None):
        """
        A node selector term, associated with the corresponding weight.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]]]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]]]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs']]]]):
        pulumi.set(self, "match_fields", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 node_selector_terms: pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]]):
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]]:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    @node_selector_terms.setter
    def node_selector_terms(self, value: pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs']]]):
        pulumi.set(self, "node_selector_terms", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]]] = None,
                 match_fields: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]]] = None):
        """
        A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]] match_expressions: A list of node selector requirements by node's labels.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]]]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]]]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    @match_fields.setter
    def match_fields(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs']]]]):
        pulumi.set(self, "match_fields", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: The label key that the selector applies to.
        :param pulumi.Input[str] operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 pod_affinity_term: pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'],
                 weight: pulumi.Input[int]):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'] pod_affinity_term: Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']:
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(self, value: pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(__self__, *,
                 topology_key: pulumi.Input[str],
                 label_selector: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs'] label_selector: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> pulumi.Input[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 topology_key: pulumi.Input[str],
                 label_selector: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs'] label_selector: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> pulumi.Input[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs:
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None,
                 required_during_scheduling_ignored_during_execution: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]] = None):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @preferred_during_scheduling_ignored_during_execution.setter
    def preferred_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "preferred_during_scheduling_ignored_during_execution", value)

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]:
        """
        If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    @required_during_scheduling_ignored_during_execution.setter
    def required_during_scheduling_ignored_during_execution(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs']]]]):
        pulumi.set(self, "required_during_scheduling_ignored_during_execution", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 pod_affinity_term: pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'],
                 weight: pulumi.Input[int]):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs'] pod_affinity_term: Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[int] weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']:
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """
        return pulumi.get(self, "pod_affinity_term")

    @pod_affinity_term.setter
    def pod_affinity_term(self, value: pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs']):
        pulumi.set(self, "pod_affinity_term", value)

    @property
    @pulumi.getter
    def weight(self) -> pulumi.Input[int]:
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    @weight.setter
    def weight(self, value: pulumi.Input[int]):
        pulumi.set(self, "weight", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs:
    def __init__(__self__, *,
                 topology_key: pulumi.Input[str],
                 label_selector: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs'] label_selector: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> pulumi.Input[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs:
    def __init__(__self__, *,
                 topology_key: pulumi.Input[str],
                 label_selector: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']] = None,
                 namespaces: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
        :param pulumi.Input[str] topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs'] label_selector: A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> pulumi.Input[str]:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @topology_key.setter
    def topology_key(self, value: pulumi.Input[str]):
        pulumi.set(self, "topology_key", value)

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @label_selector.setter
    def label_selector(self, value: Optional[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs']]):
        pulumi.set(self, "label_selector", value)

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    @namespaces.setter
    def namespaces(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "namespaces", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs:
    def __init__(__self__, *,
                 match_expressions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @match_expressions.setter
    def match_expressions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs']]]]):
        pulumi.set(self, "match_expressions", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 operator: pulumi.Input[str],
                 values: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param pulumi.Input[str] key: key is the label key that the selector applies to.
        :param pulumi.Input[str] operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> pulumi.Input[str]:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: pulumi.Input[str]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter
    def values(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    @values.setter
    def values(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "values", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs:
    def __init__(__self__, *,
                 effect: Optional[pulumi.Input[str]] = None,
                 key: Optional[pulumi.Input[str]] = None,
                 operator: Optional[pulumi.Input[str]] = None,
                 toleration_seconds: Optional[pulumi.Input[int]] = None,
                 value: Optional[pulumi.Input[str]] = None):
        """
        The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
        :param pulumi.Input[str] effect: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param pulumi.Input[str] key: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param pulumi.Input[str] operator: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
        :param pulumi.Input[int] toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        :param pulumi.Input[str] value: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[pulumi.Input[str]]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @effect.setter
    def effect(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "effect", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter
    def operator(self) -> Optional[pulumi.Input[str]]:
        """
        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @operator.setter
    def operator(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operator", value)

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[pulumi.Input[int]]:
        """
        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @toleration_seconds.setter
    def toleration_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "toleration_seconds", value)

    @property
    @pulumi.getter
    def value(self) -> Optional[pulumi.Input[str]]:
        """
        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "value", value)


@pulumi.input_type
class ClusterIssuerSpecAcmeSolversSelectorArgs:
    def __init__(__self__, *,
                 dns_names: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 dns_zones: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 match_labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None):
        """
        Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_names: List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] dns_zones: List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] match_labels: A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
        """
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if dns_zones is not None:
            pulumi.set(__self__, "dns_zones", dns_zones)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
        """
        return pulumi.get(self, "dns_names")

    @dns_names.setter
    def dns_names(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_names", value)

    @property
    @pulumi.getter(name="dnsZones")
    def dns_zones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
        """
        return pulumi.get(self, "dns_zones")

    @dns_zones.setter
    def dns_zones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "dns_zones", value)

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
        """
        return pulumi.get(self, "match_labels")

    @match_labels.setter
    def match_labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "match_labels", value)


@pulumi.input_type
class ClusterIssuerSpecCaArgs:
    def __init__(__self__, *,
                 secret_name: pulumi.Input[str],
                 crl_distribution_points: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 ocsp_servers: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
        :param pulumi.Input[str] secret_name: SecretName is the name of the secret used to sign Certificates issued by this Issuer.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] crl_distribution_points: The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] ocsp_servers: The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
        """
        pulumi.set(__self__, "secret_name", secret_name)
        if crl_distribution_points is not None:
            pulumi.set(__self__, "crl_distribution_points", crl_distribution_points)
        if ocsp_servers is not None:
            pulumi.set(__self__, "ocsp_servers", ocsp_servers)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> pulumi.Input[str]:
        """
        SecretName is the name of the secret used to sign Certificates issued by this Issuer.
        """
        return pulumi.get(self, "secret_name")

    @secret_name.setter
    def secret_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "secret_name", value)

    @property
    @pulumi.getter(name="crlDistributionPoints")
    def crl_distribution_points(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
        """
        return pulumi.get(self, "crl_distribution_points")

    @crl_distribution_points.setter
    def crl_distribution_points(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "crl_distribution_points", value)

    @property
    @pulumi.getter(name="ocspServers")
    def ocsp_servers(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
        """
        return pulumi.get(self, "ocsp_servers")

    @ocsp_servers.setter
    def ocsp_servers(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "ocsp_servers", value)


@pulumi.input_type
class ClusterIssuerSpecSelfSignedArgs:
    def __init__(__self__, *,
                 crl_distribution_points: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] crl_distribution_points: The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
        """
        if crl_distribution_points is not None:
            pulumi.set(__self__, "crl_distribution_points", crl_distribution_points)

    @property
    @pulumi.getter(name="crlDistributionPoints")
    def crl_distribution_points(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
        """
        return pulumi.get(self, "crl_distribution_points")

    @crl_distribution_points.setter
    def crl_distribution_points(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "crl_distribution_points", value)


@pulumi.input_type
class ClusterIssuerSpecVaultArgs:
    def __init__(__self__, *,
                 auth: pulumi.Input['ClusterIssuerSpecVaultAuthArgs'],
                 path: pulumi.Input[str],
                 server: pulumi.Input[str],
                 ca_bundle: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None):
        """
        Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
        :param pulumi.Input['ClusterIssuerSpecVaultAuthArgs'] auth: Auth configures how cert-manager authenticates with the Vault server.
        :param pulumi.Input[str] path: Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
        :param pulumi.Input[str] server: Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
        :param pulumi.Input[str] ca_bundle: PEM encoded CA bundle used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.
        :param pulumi.Input[str] namespace: Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
        """
        pulumi.set(__self__, "auth", auth)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def auth(self) -> pulumi.Input['ClusterIssuerSpecVaultAuthArgs']:
        """
        Auth configures how cert-manager authenticates with the Vault server.
        """
        return pulumi.get(self, "auth")

    @auth.setter
    def auth(self, value: pulumi.Input['ClusterIssuerSpecVaultAuthArgs']):
        pulumi.set(self, "auth", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter
    def server(self) -> pulumi.Input[str]:
        """
        Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
        """
        return pulumi.get(self, "server")

    @server.setter
    def server(self, value: pulumi.Input[str]):
        pulumi.set(self, "server", value)

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[pulumi.Input[str]]:
        """
        PEM encoded CA bundle used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.
        """
        return pulumi.get(self, "ca_bundle")

    @ca_bundle.setter
    def ca_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_bundle", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)


@pulumi.input_type
class ClusterIssuerSpecVaultAuthArgs:
    def __init__(__self__, *,
                 app_role: Optional[pulumi.Input['ClusterIssuerSpecVaultAuthAppRoleArgs']] = None,
                 kubernetes: Optional[pulumi.Input['ClusterIssuerSpecVaultAuthKubernetesArgs']] = None,
                 token_secret_ref: Optional[pulumi.Input['ClusterIssuerSpecVaultAuthTokenSecretRefArgs']] = None):
        """
        Auth configures how cert-manager authenticates with the Vault server.
        :param pulumi.Input['ClusterIssuerSpecVaultAuthAppRoleArgs'] app_role: AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
        :param pulumi.Input['ClusterIssuerSpecVaultAuthKubernetesArgs'] kubernetes: Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
        :param pulumi.Input['ClusterIssuerSpecVaultAuthTokenSecretRefArgs'] token_secret_ref: TokenSecretRef authenticates with Vault by presenting a token.
        """
        if app_role is not None:
            pulumi.set(__self__, "app_role", app_role)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if token_secret_ref is not None:
            pulumi.set(__self__, "token_secret_ref", token_secret_ref)

    @property
    @pulumi.getter(name="appRole")
    def app_role(self) -> Optional[pulumi.Input['ClusterIssuerSpecVaultAuthAppRoleArgs']]:
        """
        AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
        """
        return pulumi.get(self, "app_role")

    @app_role.setter
    def app_role(self, value: Optional[pulumi.Input['ClusterIssuerSpecVaultAuthAppRoleArgs']]):
        pulumi.set(self, "app_role", value)

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional[pulumi.Input['ClusterIssuerSpecVaultAuthKubernetesArgs']]:
        """
        Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
        """
        return pulumi.get(self, "kubernetes")

    @kubernetes.setter
    def kubernetes(self, value: Optional[pulumi.Input['ClusterIssuerSpecVaultAuthKubernetesArgs']]):
        pulumi.set(self, "kubernetes", value)

    @property
    @pulumi.getter(name="tokenSecretRef")
    def token_secret_ref(self) -> Optional[pulumi.Input['ClusterIssuerSpecVaultAuthTokenSecretRefArgs']]:
        """
        TokenSecretRef authenticates with Vault by presenting a token.
        """
        return pulumi.get(self, "token_secret_ref")

    @token_secret_ref.setter
    def token_secret_ref(self, value: Optional[pulumi.Input['ClusterIssuerSpecVaultAuthTokenSecretRefArgs']]):
        pulumi.set(self, "token_secret_ref", value)


@pulumi.input_type
class ClusterIssuerSpecVaultAuthAppRoleArgs:
    def __init__(__self__, *,
                 path: pulumi.Input[str],
                 role_id: pulumi.Input[str],
                 secret_ref: pulumi.Input['ClusterIssuerSpecVaultAuthAppRoleSecretRefArgs']):
        """
        AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
        :param pulumi.Input[str] path: Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
        :param pulumi.Input[str] role_id: RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
        :param pulumi.Input['ClusterIssuerSpecVaultAuthAppRoleSecretRefArgs'] secret_ref: Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Input[str]:
        """
        RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> pulumi.Input['ClusterIssuerSpecVaultAuthAppRoleSecretRefArgs']:
        """
        Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: pulumi.Input['ClusterIssuerSpecVaultAuthAppRoleSecretRefArgs']):
        pulumi.set(self, "secret_ref", value)


@pulumi.input_type
class ClusterIssuerSpecVaultAuthAppRoleSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ClusterIssuerSpecVaultAuthKubernetesArgs:
    def __init__(__self__, *,
                 role: pulumi.Input[str],
                 secret_ref: pulumi.Input['ClusterIssuerSpecVaultAuthKubernetesSecretRefArgs'],
                 mount_path: Optional[pulumi.Input[str]] = None):
        """
        Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
        :param pulumi.Input[str] role: A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
        :param pulumi.Input['ClusterIssuerSpecVaultAuthKubernetesSecretRefArgs'] secret_ref: The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
        :param pulumi.Input[str] mount_path: The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "secret_ref", secret_ref)
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)

    @property
    @pulumi.getter
    def role(self) -> pulumi.Input[str]:
        """
        A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
        """
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: pulumi.Input[str]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> pulumi.Input['ClusterIssuerSpecVaultAuthKubernetesSecretRefArgs']:
        """
        The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
        """
        return pulumi.get(self, "secret_ref")

    @secret_ref.setter
    def secret_ref(self, value: pulumi.Input['ClusterIssuerSpecVaultAuthKubernetesSecretRefArgs']):
        pulumi.set(self, "secret_ref", value)

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
        """
        return pulumi.get(self, "mount_path")

    @mount_path.setter
    def mount_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "mount_path", value)


@pulumi.input_type
class ClusterIssuerSpecVaultAuthKubernetesSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ClusterIssuerSpecVaultAuthTokenSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        TokenSecretRef authenticates with Vault by presenting a token.
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ClusterIssuerSpecVenafiArgs:
    def __init__(__self__, *,
                 zone: pulumi.Input[str],
                 cloud: Optional[pulumi.Input['ClusterIssuerSpecVenafiCloudArgs']] = None,
                 tpp: Optional[pulumi.Input['ClusterIssuerSpecVenafiTppArgs']] = None):
        """
        Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
        :param pulumi.Input[str] zone: Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
        :param pulumi.Input['ClusterIssuerSpecVenafiCloudArgs'] cloud: Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
        :param pulumi.Input['ClusterIssuerSpecVenafiTppArgs'] tpp: TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
        """
        pulumi.set(__self__, "zone", zone)
        if cloud is not None:
            pulumi.set(__self__, "cloud", cloud)
        if tpp is not None:
            pulumi.set(__self__, "tpp", tpp)

    @property
    @pulumi.getter
    def zone(self) -> pulumi.Input[str]:
        """
        Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
        """
        return pulumi.get(self, "zone")

    @zone.setter
    def zone(self, value: pulumi.Input[str]):
        pulumi.set(self, "zone", value)

    @property
    @pulumi.getter
    def cloud(self) -> Optional[pulumi.Input['ClusterIssuerSpecVenafiCloudArgs']]:
        """
        Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
        """
        return pulumi.get(self, "cloud")

    @cloud.setter
    def cloud(self, value: Optional[pulumi.Input['ClusterIssuerSpecVenafiCloudArgs']]):
        pulumi.set(self, "cloud", value)

    @property
    @pulumi.getter
    def tpp(self) -> Optional[pulumi.Input['ClusterIssuerSpecVenafiTppArgs']]:
        """
        TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
        """
        return pulumi.get(self, "tpp")

    @tpp.setter
    def tpp(self, value: Optional[pulumi.Input['ClusterIssuerSpecVenafiTppArgs']]):
        pulumi.set(self, "tpp", value)


@pulumi.input_type
class ClusterIssuerSpecVenafiCloudArgs:
    def __init__(__self__, *,
                 api_token_secret_ref: pulumi.Input['ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgs'],
                 url: Optional[pulumi.Input[str]] = None):
        """
        Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
        :param pulumi.Input['ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgs'] api_token_secret_ref: APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
        :param pulumi.Input[str] url: URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
        """
        pulumi.set(__self__, "api_token_secret_ref", api_token_secret_ref)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="apiTokenSecretRef")
    def api_token_secret_ref(self) -> pulumi.Input['ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgs']:
        """
        APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
        """
        return pulumi.get(self, "api_token_secret_ref")

    @api_token_secret_ref.setter
    def api_token_secret_ref(self, value: pulumi.Input['ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgs']):
        pulumi.set(self, "api_token_secret_ref", value)

    @property
    @pulumi.getter
    def url(self) -> Optional[pulumi.Input[str]]:
        """
        URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "url", value)


@pulumi.input_type
class ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str],
                 key: Optional[pulumi.Input[str]] = None):
        """
        APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param pulumi.Input[str] key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def key(self) -> Optional[pulumi.Input[str]]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "key", value)


@pulumi.input_type
class ClusterIssuerSpecVenafiTppArgs:
    def __init__(__self__, *,
                 credentials_ref: pulumi.Input['ClusterIssuerSpecVenafiTppCredentialsRefArgs'],
                 url: pulumi.Input[str],
                 ca_bundle: Optional[pulumi.Input[str]] = None):
        """
        TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
        :param pulumi.Input['ClusterIssuerSpecVenafiTppCredentialsRefArgs'] credentials_ref: CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
        :param pulumi.Input[str] url: URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
        :param pulumi.Input[str] ca_bundle: CABundle is a PEM encoded TLS certificate to use to verify connections to the TPP instance. If specified, system roots will not be used and the issuing CA for the TPP instance must be verifiable using the provided root. If not specified, the connection will be verified using the cert-manager system root certificates.
        """
        pulumi.set(__self__, "credentials_ref", credentials_ref)
        pulumi.set(__self__, "url", url)
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)

    @property
    @pulumi.getter(name="credentialsRef")
    def credentials_ref(self) -> pulumi.Input['ClusterIssuerSpecVenafiTppCredentialsRefArgs']:
        """
        CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
        """
        return pulumi.get(self, "credentials_ref")

    @credentials_ref.setter
    def credentials_ref(self, value: pulumi.Input['ClusterIssuerSpecVenafiTppCredentialsRefArgs']):
        pulumi.set(self, "credentials_ref", value)

    @property
    @pulumi.getter
    def url(self) -> pulumi.Input[str]:
        """
        URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
        """
        return pulumi.get(self, "url")

    @url.setter
    def url(self, value: pulumi.Input[str]):
        pulumi.set(self, "url", value)

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[pulumi.Input[str]]:
        """
        CABundle is a PEM encoded TLS certificate to use to verify connections to the TPP instance. If specified, system roots will not be used and the issuing CA for the TPP instance must be verifiable using the provided root. If not specified, the connection will be verified using the cert-manager system root certificates.
        """
        return pulumi.get(self, "ca_bundle")

    @ca_bundle.setter
    def ca_bundle(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_bundle", value)


@pulumi.input_type
class ClusterIssuerSpecVenafiTppCredentialsRefArgs:
    def __init__(__self__, *,
                 name: pulumi.Input[str]):
        """
        CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
        :param pulumi.Input[str] name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> pulumi.Input[str]:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: pulumi.Input[str]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class ClusterIssuerStatusArgs:
    def __init__(__self__, *,
                 acme: Optional[pulumi.Input['ClusterIssuerStatusAcmeArgs']] = None,
                 conditions: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerStatusConditionsArgs']]]] = None):
        """
        Status of the ClusterIssuer. This is set and managed automatically.
        :param pulumi.Input['ClusterIssuerStatusAcmeArgs'] acme: ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
        :param pulumi.Input[Sequence[pulumi.Input['ClusterIssuerStatusConditionsArgs']]] conditions: List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
        """
        if acme is not None:
            pulumi.set(__self__, "acme", acme)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def acme(self) -> Optional[pulumi.Input['ClusterIssuerStatusAcmeArgs']]:
        """
        ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
        """
        return pulumi.get(self, "acme")

    @acme.setter
    def acme(self, value: Optional[pulumi.Input['ClusterIssuerStatusAcmeArgs']]):
        pulumi.set(self, "acme", value)

    @property
    @pulumi.getter
    def conditions(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerStatusConditionsArgs']]]]:
        """
        List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
        """
        return pulumi.get(self, "conditions")

    @conditions.setter
    def conditions(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['ClusterIssuerStatusConditionsArgs']]]]):
        pulumi.set(self, "conditions", value)


@pulumi.input_type
class ClusterIssuerStatusAcmeArgs:
    def __init__(__self__, *,
                 last_registered_email: Optional[pulumi.Input[str]] = None,
                 uri: Optional[pulumi.Input[str]] = None):
        """
        ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
        :param pulumi.Input[str] last_registered_email: LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
        :param pulumi.Input[str] uri: URI is the unique account identifier, which can also be used to retrieve account details from the CA
        """
        if last_registered_email is not None:
            pulumi.set(__self__, "last_registered_email", last_registered_email)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="lastRegisteredEmail")
    def last_registered_email(self) -> Optional[pulumi.Input[str]]:
        """
        LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
        """
        return pulumi.get(self, "last_registered_email")

    @last_registered_email.setter
    def last_registered_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_registered_email", value)

    @property
    @pulumi.getter
    def uri(self) -> Optional[pulumi.Input[str]]:
        """
        URI is the unique account identifier, which can also be used to retrieve account details from the CA
        """
        return pulumi.get(self, "uri")

    @uri.setter
    def uri(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uri", value)


@pulumi.input_type
class ClusterIssuerStatusConditionsArgs:
    def __init__(__self__, *,
                 status: pulumi.Input[str],
                 type: pulumi.Input[str],
                 last_transition_time: Optional[pulumi.Input[str]] = None,
                 message: Optional[pulumi.Input[str]] = None,
                 observed_generation: Optional[pulumi.Input[int]] = None,
                 reason: Optional[pulumi.Input[str]] = None):
        """
        IssuerCondition contains condition information for an Issuer.
        :param pulumi.Input[str] status: Status of the condition, one of (`True`, `False`, `Unknown`).
        :param pulumi.Input[str] type: Type of the condition, known values are (`Ready`).
        :param pulumi.Input[str] last_transition_time: LastTransitionTime is the timestamp corresponding to the last status change of this condition.
        :param pulumi.Input[str] message: Message is a human readable description of the details of the last transition, complementing reason.
        :param pulumi.Input[int] observed_generation: If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
        :param pulumi.Input[str] reason: Reason is a brief machine readable explanation for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> pulumi.Input[str]:
        """
        Status of the condition, one of (`True`, `False`, `Unknown`).
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: pulumi.Input[str]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        Type of the condition, known values are (`Ready`).
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[pulumi.Input[str]]:
        """
        LastTransitionTime is the timestamp corresponding to the last status change of this condition.
        """
        return pulumi.get(self, "last_transition_time")

    @last_transition_time.setter
    def last_transition_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_transition_time", value)

    @property
    @pulumi.getter
    def message(self) -> Optional[pulumi.Input[str]]:
        """
        Message is a human readable description of the details of the last transition, complementing reason.
        """
        return pulumi.get(self, "message")

    @message.setter
    def message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message", value)

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[pulumi.Input[int]]:
        """
        If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
        """
        return pulumi.get(self, "observed_generation")

    @observed_generation.setter
    def observed_generation(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "observed_generation", value)

    @property
    @pulumi.getter
    def reason(self) -> Optional[pulumi.Input[str]]:
        """
        Reason is a brief machine readable explanation for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    @reason.setter
    def reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reason", value)


