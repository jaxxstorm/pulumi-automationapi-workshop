# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'ClusterIssuerSpec',
    'ClusterIssuerSpecAcme',
    'ClusterIssuerSpecAcmeExternalAccountBinding',
    'ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRef',
    'ClusterIssuerSpecAcmePrivateKeySecretRef',
    'ClusterIssuerSpecAcmeSolvers',
    'ClusterIssuerSpecAcmeSolversDns01',
    'ClusterIssuerSpecAcmeSolversDns01AcmeDNS',
    'ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRef',
    'ClusterIssuerSpecAcmeSolversDns01Akamai',
    'ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef',
    'ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef',
    'ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef',
    'ClusterIssuerSpecAcmeSolversDns01AzureDNS',
    'ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRef',
    'ClusterIssuerSpecAcmeSolversDns01CloudDNS',
    'ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRef',
    'ClusterIssuerSpecAcmeSolversDns01Cloudflare',
    'ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef',
    'ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef',
    'ClusterIssuerSpecAcmeSolversDns01Digitalocean',
    'ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef',
    'ClusterIssuerSpecAcmeSolversDns01Rfc2136',
    'ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef',
    'ClusterIssuerSpecAcmeSolversDns01Route53',
    'ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef',
    'ClusterIssuerSpecAcmeSolversDns01Webhook',
    'ClusterIssuerSpecAcmeSolversHttp01',
    'ClusterIssuerSpecAcmeSolversHttp01Ingress',
    'ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplate',
    'ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplate',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions',
    'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations',
    'ClusterIssuerSpecAcmeSolversSelector',
    'ClusterIssuerSpecCa',
    'ClusterIssuerSpecSelfSigned',
    'ClusterIssuerSpecVault',
    'ClusterIssuerSpecVaultAuth',
    'ClusterIssuerSpecVaultAuthAppRole',
    'ClusterIssuerSpecVaultAuthAppRoleSecretRef',
    'ClusterIssuerSpecVaultAuthKubernetes',
    'ClusterIssuerSpecVaultAuthKubernetesSecretRef',
    'ClusterIssuerSpecVaultAuthTokenSecretRef',
    'ClusterIssuerSpecVenafi',
    'ClusterIssuerSpecVenafiCloud',
    'ClusterIssuerSpecVenafiCloudApiTokenSecretRef',
    'ClusterIssuerSpecVenafiTpp',
    'ClusterIssuerSpecVenafiTppCredentialsRef',
    'ClusterIssuerStatus',
    'ClusterIssuerStatusAcme',
    'ClusterIssuerStatusConditions',
]

@pulumi.output_type
class ClusterIssuerSpec(dict):
    """
    Desired state of the ClusterIssuer resource.
    """
    def __init__(__self__, *,
                 acme: Optional['outputs.ClusterIssuerSpecAcme'] = None,
                 ca: Optional['outputs.ClusterIssuerSpecCa'] = None,
                 self_signed: Optional['outputs.ClusterIssuerSpecSelfSigned'] = None,
                 vault: Optional['outputs.ClusterIssuerSpecVault'] = None,
                 venafi: Optional['outputs.ClusterIssuerSpecVenafi'] = None):
        """
        Desired state of the ClusterIssuer resource.
        :param 'ClusterIssuerSpecAcmeArgs' acme: ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
        :param 'ClusterIssuerSpecCaArgs' ca: CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
        :param 'ClusterIssuerSpecSelfSignedArgs' self_signed: SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
        :param 'ClusterIssuerSpecVaultArgs' vault: Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
        :param 'ClusterIssuerSpecVenafiArgs' venafi: Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
        """
        if acme is not None:
            pulumi.set(__self__, "acme", acme)
        if ca is not None:
            pulumi.set(__self__, "ca", ca)
        if self_signed is not None:
            pulumi.set(__self__, "self_signed", self_signed)
        if vault is not None:
            pulumi.set(__self__, "vault", vault)
        if venafi is not None:
            pulumi.set(__self__, "venafi", venafi)

    @property
    @pulumi.getter
    def acme(self) -> Optional['outputs.ClusterIssuerSpecAcme']:
        """
        ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
        """
        return pulumi.get(self, "acme")

    @property
    @pulumi.getter
    def ca(self) -> Optional['outputs.ClusterIssuerSpecCa']:
        """
        CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
        """
        return pulumi.get(self, "ca")

    @property
    @pulumi.getter(name="selfSigned")
    def self_signed(self) -> Optional['outputs.ClusterIssuerSpecSelfSigned']:
        """
        SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
        """
        return pulumi.get(self, "self_signed")

    @property
    @pulumi.getter
    def vault(self) -> Optional['outputs.ClusterIssuerSpecVault']:
        """
        Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
        """
        return pulumi.get(self, "vault")

    @property
    @pulumi.getter
    def venafi(self) -> Optional['outputs.ClusterIssuerSpecVenafi']:
        """
        Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
        """
        return pulumi.get(self, "venafi")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcme(dict):
    """
    ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
    """
    def __init__(__self__, *,
                 private_key_secret_ref: 'outputs.ClusterIssuerSpecAcmePrivateKeySecretRef',
                 server: str,
                 disable_account_key_generation: Optional[bool] = None,
                 email: Optional[str] = None,
                 enable_duration_feature: Optional[bool] = None,
                 external_account_binding: Optional['outputs.ClusterIssuerSpecAcmeExternalAccountBinding'] = None,
                 preferred_chain: Optional[str] = None,
                 skip_tls_verify: Optional[bool] = None,
                 solvers: Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolvers']] = None):
        """
        ACME configures this issuer to communicate with a RFC8555 (ACME) server to obtain signed x509 certificates.
        :param 'ClusterIssuerSpecAcmePrivateKeySecretRefArgs' private_key_secret_ref: PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
        :param str server: Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
        :param bool disable_account_key_generation: Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
        :param str email: Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
        :param bool enable_duration_feature: Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
        :param 'ClusterIssuerSpecAcmeExternalAccountBindingArgs' external_account_binding: ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
        :param str preferred_chain: PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
        :param bool skip_tls_verify: Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have their TLS certificate validated (i.e. insecure connections will be allowed). Only enable this option in development environments. The cert-manager system installed roots will be used to verify connections to the ACME server if this is false. Defaults to false.
        :param Sequence['ClusterIssuerSpecAcmeSolversArgs'] solvers: Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
        """
        pulumi.set(__self__, "private_key_secret_ref", private_key_secret_ref)
        pulumi.set(__self__, "server", server)
        if disable_account_key_generation is not None:
            pulumi.set(__self__, "disable_account_key_generation", disable_account_key_generation)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if enable_duration_feature is not None:
            pulumi.set(__self__, "enable_duration_feature", enable_duration_feature)
        if external_account_binding is not None:
            pulumi.set(__self__, "external_account_binding", external_account_binding)
        if preferred_chain is not None:
            pulumi.set(__self__, "preferred_chain", preferred_chain)
        if skip_tls_verify is not None:
            pulumi.set(__self__, "skip_tls_verify", skip_tls_verify)
        if solvers is not None:
            pulumi.set(__self__, "solvers", solvers)

    @property
    @pulumi.getter(name="privateKeySecretRef")
    def private_key_secret_ref(self) -> 'outputs.ClusterIssuerSpecAcmePrivateKeySecretRef':
        """
        PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
        """
        return pulumi.get(self, "private_key_secret_ref")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        Server is the URL used to access the ACME server's 'directory' endpoint. For example, for Let's Encrypt's staging endpoint, you would use: "https://acme-staging-v02.api.letsencrypt.org/directory". Only ACME v2 endpoints (i.e. RFC 8555) are supported.
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="disableAccountKeyGeneration")
    def disable_account_key_generation(self) -> Optional[bool]:
        """
        Enables or disables generating a new ACME account key. If true, the Issuer resource will *not* request a new account but will expect the account key to be supplied via an existing secret. If false, the cert-manager system will generate a new ACME account key for the Issuer. Defaults to false.
        """
        return pulumi.get(self, "disable_account_key_generation")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Email is the email address to be associated with the ACME account. This field is optional, but it is strongly recommended to be set. It will be used to contact you in case of issues with your account or certificates, including expiry notification emails. This field may be updated after the account is initially registered.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="enableDurationFeature")
    def enable_duration_feature(self) -> Optional[bool]:
        """
        Enables requesting a Not After date on certificates that matches the duration of the certificate. This is not supported by all ACME servers like Let's Encrypt. If set to true when the ACME server does not support it it will create an error on the Order. Defaults to false.
        """
        return pulumi.get(self, "enable_duration_feature")

    @property
    @pulumi.getter(name="externalAccountBinding")
    def external_account_binding(self) -> Optional['outputs.ClusterIssuerSpecAcmeExternalAccountBinding']:
        """
        ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
        """
        return pulumi.get(self, "external_account_binding")

    @property
    @pulumi.getter(name="preferredChain")
    def preferred_chain(self) -> Optional[str]:
        """
        PreferredChain is the chain to use if the ACME server outputs multiple. PreferredChain is no guarantee that this one gets delivered by the ACME endpoint. For example, for Let's Encrypt's DST crosssign you would use: "DST Root CA X3" or "ISRG Root X1" for the newer Let's Encrypt root CA. This value picks the first certificate bundle in the ACME alternative chains that has a certificate with this value as its issuer's CN
        """
        return pulumi.get(self, "preferred_chain")

    @property
    @pulumi.getter(name="skipTLSVerify")
    def skip_tls_verify(self) -> Optional[bool]:
        """
        Enables or disables validation of the ACME server TLS certificate. If true, requests to the ACME server will not have their TLS certificate validated (i.e. insecure connections will be allowed). Only enable this option in development environments. The cert-manager system installed roots will be used to verify connections to the ACME server if this is false. Defaults to false.
        """
        return pulumi.get(self, "skip_tls_verify")

    @property
    @pulumi.getter
    def solvers(self) -> Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolvers']]:
        """
        Solvers is a list of challenge solvers that will be used to solve ACME challenges for the matching domains. Solver configurations must be provided in order to obtain certificates from an ACME server. For more information, see: https://cert-manager.io/docs/configuration/acme/
        """
        return pulumi.get(self, "solvers")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeExternalAccountBinding(dict):
    """
    ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
    """
    def __init__(__self__, *,
                 key_algorithm: str,
                 key_id: str,
                 key_secret_ref: 'outputs.ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRef'):
        """
        ExternalAccountBinding is a reference to a CA external account of the ACME server. If set, upon registration cert-manager will attempt to associate the given external account credentials with the registered ACME account.
        :param str key_algorithm: keyAlgorithm is the MAC key algorithm that the key is used for. Valid values are "HS256", "HS384" and "HS512".
        :param str key_id: keyID is the ID of the CA key that the External Account is bound to.
        :param 'ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRefArgs' key_secret_ref: keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
        """
        pulumi.set(__self__, "key_algorithm", key_algorithm)
        pulumi.set(__self__, "key_id", key_id)
        pulumi.set(__self__, "key_secret_ref", key_secret_ref)

    @property
    @pulumi.getter(name="keyAlgorithm")
    def key_algorithm(self) -> str:
        """
        keyAlgorithm is the MAC key algorithm that the key is used for. Valid values are "HS256", "HS384" and "HS512".
        """
        return pulumi.get(self, "key_algorithm")

    @property
    @pulumi.getter(name="keyID")
    def key_id(self) -> str:
        """
        keyID is the ID of the CA key that the External Account is bound to.
        """
        return pulumi.get(self, "key_id")

    @property
    @pulumi.getter(name="keySecretRef")
    def key_secret_ref(self) -> 'outputs.ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRef':
        """
        keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
        """
        return pulumi.get(self, "key_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeExternalAccountBindingKeySecretRef(dict):
    """
    keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        keySecretRef is a Secret Key Selector referencing a data item in a Kubernetes Secret which holds the symmetric MAC key of the External Account Binding. The `key` is the index string that is paired with the key data in the Secret and should not be confused with the key data itself, or indeed with the External Account Binding keyID above. The secret key stored in the Secret **must** be un-padded, base64 URL encoded data.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmePrivateKeySecretRef(dict):
    """
    PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        PrivateKey is the name of a Kubernetes Secret resource that will be used to store the automatically generated ACME account private key. Optionally, a `key` may be specified to select a specific entry within the named Secret resource. If `key` is not specified, a default of `tls.key` will be used.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolvers(dict):
    """
    Configures an issuer to solve challenges using the specified options. Only one of HTTP01 or DNS01 may be provided.
    """
    def __init__(__self__, *,
                 dns01: Optional['outputs.ClusterIssuerSpecAcmeSolversDns01'] = None,
                 http01: Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01'] = None,
                 selector: Optional['outputs.ClusterIssuerSpecAcmeSolversSelector'] = None):
        """
        Configures an issuer to solve challenges using the specified options. Only one of HTTP01 or DNS01 may be provided.
        :param 'ClusterIssuerSpecAcmeSolversDns01Args' dns01: Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
        :param 'ClusterIssuerSpecAcmeSolversHttp01Args' http01: Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        :param 'ClusterIssuerSpecAcmeSolversSelectorArgs' selector: Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
        """
        if dns01 is not None:
            pulumi.set(__self__, "dns01", dns01)
        if http01 is not None:
            pulumi.set(__self__, "http01", http01)
        if selector is not None:
            pulumi.set(__self__, "selector", selector)

    @property
    @pulumi.getter
    def dns01(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversDns01']:
        """
        Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
        """
        return pulumi.get(self, "dns01")

    @property
    @pulumi.getter
    def http01(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01']:
        """
        Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        """
        return pulumi.get(self, "http01")

    @property
    @pulumi.getter
    def selector(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversSelector']:
        """
        Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
        """
        return pulumi.get(self, "selector")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01(dict):
    """
    Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
    """
    def __init__(__self__, *,
                 acme_dns: Optional['outputs.ClusterIssuerSpecAcmeSolversDns01AcmeDNS'] = None,
                 akamai: Optional['outputs.ClusterIssuerSpecAcmeSolversDns01Akamai'] = None,
                 azure_dns: Optional['outputs.ClusterIssuerSpecAcmeSolversDns01AzureDNS'] = None,
                 cloud_dns: Optional['outputs.ClusterIssuerSpecAcmeSolversDns01CloudDNS'] = None,
                 cloudflare: Optional['outputs.ClusterIssuerSpecAcmeSolversDns01Cloudflare'] = None,
                 cname_strategy: Optional[str] = None,
                 digitalocean: Optional['outputs.ClusterIssuerSpecAcmeSolversDns01Digitalocean'] = None,
                 rfc2136: Optional['outputs.ClusterIssuerSpecAcmeSolversDns01Rfc2136'] = None,
                 route53: Optional['outputs.ClusterIssuerSpecAcmeSolversDns01Route53'] = None,
                 webhook: Optional['outputs.ClusterIssuerSpecAcmeSolversDns01Webhook'] = None):
        """
        Configures cert-manager to attempt to complete authorizations by performing the DNS01 challenge flow.
        :param 'ClusterIssuerSpecAcmeSolversDns01AcmeDNSArgs' acme_dns: Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
        :param 'ClusterIssuerSpecAcmeSolversDns01AkamaiArgs' akamai: Use the Akamai DNS zone management API to manage DNS01 challenge records.
        :param 'ClusterIssuerSpecAcmeSolversDns01AzureDNSArgs' azure_dns: Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        :param 'ClusterIssuerSpecAcmeSolversDns01CloudDNSArgs' cloud_dns: Use the Google Cloud DNS API to manage DNS01 challenge records.
        :param 'ClusterIssuerSpecAcmeSolversDns01CloudflareArgs' cloudflare: Use the Cloudflare API to manage DNS01 challenge records.
        :param str cname_strategy: CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
        :param 'ClusterIssuerSpecAcmeSolversDns01DigitaloceanArgs' digitalocean: Use the DigitalOcean DNS API to manage DNS01 challenge records.
        :param 'ClusterIssuerSpecAcmeSolversDns01Rfc2136Args' rfc2136: Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
        :param 'ClusterIssuerSpecAcmeSolversDns01Route53Args' route53: Use the AWS Route53 API to manage DNS01 challenge records.
        :param 'ClusterIssuerSpecAcmeSolversDns01WebhookArgs' webhook: Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
        """
        if acme_dns is not None:
            pulumi.set(__self__, "acme_dns", acme_dns)
        if akamai is not None:
            pulumi.set(__self__, "akamai", akamai)
        if azure_dns is not None:
            pulumi.set(__self__, "azure_dns", azure_dns)
        if cloud_dns is not None:
            pulumi.set(__self__, "cloud_dns", cloud_dns)
        if cloudflare is not None:
            pulumi.set(__self__, "cloudflare", cloudflare)
        if cname_strategy is not None:
            pulumi.set(__self__, "cname_strategy", cname_strategy)
        if digitalocean is not None:
            pulumi.set(__self__, "digitalocean", digitalocean)
        if rfc2136 is not None:
            pulumi.set(__self__, "rfc2136", rfc2136)
        if route53 is not None:
            pulumi.set(__self__, "route53", route53)
        if webhook is not None:
            pulumi.set(__self__, "webhook", webhook)

    @property
    @pulumi.getter(name="acmeDNS")
    def acme_dns(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversDns01AcmeDNS']:
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "acme_dns")

    @property
    @pulumi.getter
    def akamai(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversDns01Akamai']:
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "akamai")

    @property
    @pulumi.getter(name="azureDNS")
    def azure_dns(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversDns01AzureDNS']:
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "azure_dns")

    @property
    @pulumi.getter(name="cloudDNS")
    def cloud_dns(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversDns01CloudDNS']:
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "cloud_dns")

    @property
    @pulumi.getter
    def cloudflare(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversDns01Cloudflare']:
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "cloudflare")

    @property
    @pulumi.getter(name="cnameStrategy")
    def cname_strategy(self) -> Optional[str]:
        """
        CNAMEStrategy configures how the DNS01 provider should handle CNAME records when found in DNS zones.
        """
        return pulumi.get(self, "cname_strategy")

    @property
    @pulumi.getter
    def digitalocean(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversDns01Digitalocean']:
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "digitalocean")

    @property
    @pulumi.getter
    def rfc2136(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversDns01Rfc2136']:
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
        """
        return pulumi.get(self, "rfc2136")

    @property
    @pulumi.getter
    def route53(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversDns01Route53']:
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        """
        return pulumi.get(self, "route53")

    @property
    @pulumi.getter
    def webhook(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversDns01Webhook']:
        """
        Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
        """
        return pulumi.get(self, "webhook")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01AcmeDNS(dict):
    """
    Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
    """
    def __init__(__self__, *,
                 account_secret_ref: 'outputs.ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRef',
                 host: str):
        """
        Use the 'ACME DNS' (https://github.com/joohoi/acme-dns) API to manage DNS01 challenge records.
        :param 'ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRefArgs' account_secret_ref: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        pulumi.set(__self__, "account_secret_ref", account_secret_ref)
        pulumi.set(__self__, "host", host)

    @property
    @pulumi.getter(name="accountSecretRef")
    def account_secret_ref(self) -> 'outputs.ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRef':
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        return pulumi.get(self, "account_secret_ref")

    @property
    @pulumi.getter
    def host(self) -> str:
        return pulumi.get(self, "host")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01AcmeDNSAccountSecretRef(dict):
    """
    A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01Akamai(dict):
    """
    Use the Akamai DNS zone management API to manage DNS01 challenge records.
    """
    def __init__(__self__, *,
                 access_token_secret_ref: 'outputs.ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef',
                 client_secret_secret_ref: 'outputs.ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef',
                 client_token_secret_ref: 'outputs.ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef',
                 service_consumer_domain: str):
        """
        Use the Akamai DNS zone management API to manage DNS01 challenge records.
        :param 'ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRefArgs' access_token_secret_ref: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param 'ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRefArgs' client_secret_secret_ref: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param 'ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRefArgs' client_token_secret_ref: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        pulumi.set(__self__, "access_token_secret_ref", access_token_secret_ref)
        pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        pulumi.set(__self__, "client_token_secret_ref", client_token_secret_ref)
        pulumi.set(__self__, "service_consumer_domain", service_consumer_domain)

    @property
    @pulumi.getter(name="accessTokenSecretRef")
    def access_token_secret_ref(self) -> 'outputs.ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef':
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        return pulumi.get(self, "access_token_secret_ref")

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(self) -> 'outputs.ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef':
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        return pulumi.get(self, "client_secret_secret_ref")

    @property
    @pulumi.getter(name="clientTokenSecretRef")
    def client_token_secret_ref(self) -> 'outputs.ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef':
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        return pulumi.get(self, "client_token_secret_ref")

    @property
    @pulumi.getter(name="serviceConsumerDomain")
    def service_consumer_domain(self) -> str:
        return pulumi.get(self, "service_consumer_domain")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01AkamaiAccessTokenSecretRef(dict):
    """
    A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01AkamaiClientSecretSecretRef(dict):
    """
    A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01AkamaiClientTokenSecretRef(dict):
    """
    A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01AzureDNS(dict):
    """
    Use the Microsoft Azure DNS API to manage DNS01 challenge records.
    """
    def __init__(__self__, *,
                 resource_group_name: str,
                 subscription_id: str,
                 client_id: Optional[str] = None,
                 client_secret_secret_ref: Optional['outputs.ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRef'] = None,
                 environment: Optional[str] = None,
                 hosted_zone_name: Optional[str] = None,
                 tenant_id: Optional[str] = None):
        """
        Use the Microsoft Azure DNS API to manage DNS01 challenge records.
        :param str client_id: if both this and ClientSecret are left unset MSI will be used
        :param 'ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRefArgs' client_secret_secret_ref: if both this and ClientID are left unset MSI will be used
        :param str tenant_id: when specifying ClientID and ClientSecret then this field is also needed
        """
        pulumi.set(__self__, "resource_group_name", resource_group_name)
        pulumi.set(__self__, "subscription_id", subscription_id)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret_secret_ref is not None:
            pulumi.set(__self__, "client_secret_secret_ref", client_secret_secret_ref)
        if environment is not None:
            pulumi.set(__self__, "environment", environment)
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if tenant_id is not None:
            pulumi.set(__self__, "tenant_id", tenant_id)

    @property
    @pulumi.getter(name="resourceGroupName")
    def resource_group_name(self) -> str:
        return pulumi.get(self, "resource_group_name")

    @property
    @pulumi.getter(name="subscriptionID")
    def subscription_id(self) -> str:
        return pulumi.get(self, "subscription_id")

    @property
    @pulumi.getter(name="clientID")
    def client_id(self) -> Optional[str]:
        """
        if both this and ClientSecret are left unset MSI will be used
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecretSecretRef")
    def client_secret_secret_ref(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRef']:
        """
        if both this and ClientID are left unset MSI will be used
        """
        return pulumi.get(self, "client_secret_secret_ref")

    @property
    @pulumi.getter
    def environment(self) -> Optional[str]:
        return pulumi.get(self, "environment")

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[str]:
        return pulumi.get(self, "hosted_zone_name")

    @property
    @pulumi.getter(name="tenantID")
    def tenant_id(self) -> Optional[str]:
        """
        when specifying ClientID and ClientSecret then this field is also needed
        """
        return pulumi.get(self, "tenant_id")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01AzureDNSClientSecretSecretRef(dict):
    """
    if both this and ClientID are left unset MSI will be used
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        if both this and ClientID are left unset MSI will be used
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01CloudDNS(dict):
    """
    Use the Google Cloud DNS API to manage DNS01 challenge records.
    """
    def __init__(__self__, *,
                 project: str,
                 hosted_zone_name: Optional[str] = None,
                 service_account_secret_ref: Optional['outputs.ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRef'] = None):
        """
        Use the Google Cloud DNS API to manage DNS01 challenge records.
        :param str hosted_zone_name: HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
        :param 'ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRefArgs' service_account_secret_ref: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        pulumi.set(__self__, "project", project)
        if hosted_zone_name is not None:
            pulumi.set(__self__, "hosted_zone_name", hosted_zone_name)
        if service_account_secret_ref is not None:
            pulumi.set(__self__, "service_account_secret_ref", service_account_secret_ref)

    @property
    @pulumi.getter
    def project(self) -> str:
        return pulumi.get(self, "project")

    @property
    @pulumi.getter(name="hostedZoneName")
    def hosted_zone_name(self) -> Optional[str]:
        """
        HostedZoneName is an optional field that tells cert-manager in which Cloud DNS zone the challenge record has to be created. If left empty cert-manager will automatically choose a zone.
        """
        return pulumi.get(self, "hosted_zone_name")

    @property
    @pulumi.getter(name="serviceAccountSecretRef")
    def service_account_secret_ref(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRef']:
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        return pulumi.get(self, "service_account_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01CloudDNSServiceAccountSecretRef(dict):
    """
    A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01Cloudflare(dict):
    """
    Use the Cloudflare API to manage DNS01 challenge records.
    """
    def __init__(__self__, *,
                 api_key_secret_ref: Optional['outputs.ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef'] = None,
                 api_token_secret_ref: Optional['outputs.ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef'] = None,
                 email: Optional[str] = None):
        """
        Use the Cloudflare API to manage DNS01 challenge records.
        :param 'ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRefArgs' api_key_secret_ref: API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
        :param 'ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRefArgs' api_token_secret_ref: API token used to authenticate with Cloudflare.
        :param str email: Email of the account, only required when using API key based authentication.
        """
        if api_key_secret_ref is not None:
            pulumi.set(__self__, "api_key_secret_ref", api_key_secret_ref)
        if api_token_secret_ref is not None:
            pulumi.set(__self__, "api_token_secret_ref", api_token_secret_ref)
        if email is not None:
            pulumi.set(__self__, "email", email)

    @property
    @pulumi.getter(name="apiKeySecretRef")
    def api_key_secret_ref(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef']:
        """
        API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
        """
        return pulumi.get(self, "api_key_secret_ref")

    @property
    @pulumi.getter(name="apiTokenSecretRef")
    def api_token_secret_ref(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef']:
        """
        API token used to authenticate with Cloudflare.
        """
        return pulumi.get(self, "api_token_secret_ref")

    @property
    @pulumi.getter
    def email(self) -> Optional[str]:
        """
        Email of the account, only required when using API key based authentication.
        """
        return pulumi.get(self, "email")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01CloudflareApiKeySecretRef(dict):
    """
    API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        API key to use to authenticate with Cloudflare. Note: using an API token to authenticate is now the recommended method as it allows greater control of permissions.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01CloudflareApiTokenSecretRef(dict):
    """
    API token used to authenticate with Cloudflare.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        API token used to authenticate with Cloudflare.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01Digitalocean(dict):
    """
    Use the DigitalOcean DNS API to manage DNS01 challenge records.
    """
    def __init__(__self__, *,
                 token_secret_ref: 'outputs.ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef'):
        """
        Use the DigitalOcean DNS API to manage DNS01 challenge records.
        :param 'ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRefArgs' token_secret_ref: A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        pulumi.set(__self__, "token_secret_ref", token_secret_ref)

    @property
    @pulumi.getter(name="tokenSecretRef")
    def token_secret_ref(self) -> 'outputs.ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef':
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        """
        return pulumi.get(self, "token_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01DigitaloceanTokenSecretRef(dict):
    """
    A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        A reference to a specific 'key' within a Secret resource. In some instances, `key` is a required field.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01Rfc2136(dict):
    """
    Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
    """
    def __init__(__self__, *,
                 nameserver: str,
                 tsig_algorithm: Optional[str] = None,
                 tsig_key_name: Optional[str] = None,
                 tsig_secret_secret_ref: Optional['outputs.ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef'] = None):
        """
        Use RFC2136 ("Dynamic Updates in the Domain Name System") (https://datatracker.ietf.org/doc/rfc2136/) to manage DNS01 challenge records.
        :param str nameserver: The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
        :param str tsig_algorithm: The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        :param str tsig_key_name: The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
        :param 'ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRefArgs' tsig_secret_secret_ref: The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
        """
        pulumi.set(__self__, "nameserver", nameserver)
        if tsig_algorithm is not None:
            pulumi.set(__self__, "tsig_algorithm", tsig_algorithm)
        if tsig_key_name is not None:
            pulumi.set(__self__, "tsig_key_name", tsig_key_name)
        if tsig_secret_secret_ref is not None:
            pulumi.set(__self__, "tsig_secret_secret_ref", tsig_secret_secret_ref)

    @property
    @pulumi.getter
    def nameserver(self) -> str:
        """
        The IP address or hostname of an authoritative DNS server supporting RFC2136 in the form host:port. If the host is an IPv6 address it must be enclosed in square brackets (e.g [2001:db8::1]) ; port is optional. This field is required.
        """
        return pulumi.get(self, "nameserver")

    @property
    @pulumi.getter(name="tsigAlgorithm")
    def tsig_algorithm(self) -> Optional[str]:
        """
        The TSIG Algorithm configured in the DNS supporting RFC2136. Used only when ``tsigSecretSecretRef`` and ``tsigKeyName`` are defined. Supported values are (case-insensitive): ``HMACMD5`` (default), ``HMACSHA1``, ``HMACSHA256`` or ``HMACSHA512``.
        """
        return pulumi.get(self, "tsig_algorithm")

    @property
    @pulumi.getter(name="tsigKeyName")
    def tsig_key_name(self) -> Optional[str]:
        """
        The TSIG Key name configured in the DNS. If ``tsigSecretSecretRef`` is defined, this field is required.
        """
        return pulumi.get(self, "tsig_key_name")

    @property
    @pulumi.getter(name="tsigSecretSecretRef")
    def tsig_secret_secret_ref(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef']:
        """
        The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
        """
        return pulumi.get(self, "tsig_secret_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01Rfc2136TsigSecretSecretRef(dict):
    """
    The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        The name of the secret containing the TSIG value. If ``tsigKeyName`` is defined, this field is required.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01Route53(dict):
    """
    Use the AWS Route53 API to manage DNS01 challenge records.
    """
    def __init__(__self__, *,
                 region: str,
                 access_key_id: Optional[str] = None,
                 hosted_zone_id: Optional[str] = None,
                 role: Optional[str] = None,
                 secret_access_key_secret_ref: Optional['outputs.ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef'] = None):
        """
        Use the AWS Route53 API to manage DNS01 challenge records.
        :param str region: Always set the region when using AccessKeyID and SecretAccessKey
        :param str access_key_id: The AccessKeyID is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param str hosted_zone_id: If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
        :param str role: Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        :param 'ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRefArgs' secret_access_key_secret_ref: The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        pulumi.set(__self__, "region", region)
        if access_key_id is not None:
            pulumi.set(__self__, "access_key_id", access_key_id)
        if hosted_zone_id is not None:
            pulumi.set(__self__, "hosted_zone_id", hosted_zone_id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if secret_access_key_secret_ref is not None:
            pulumi.set(__self__, "secret_access_key_secret_ref", secret_access_key_secret_ref)

    @property
    @pulumi.getter
    def region(self) -> str:
        """
        Always set the region when using AccessKeyID and SecretAccessKey
        """
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="accessKeyID")
    def access_key_id(self) -> Optional[str]:
        """
        The AccessKeyID is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata see: https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        return pulumi.get(self, "access_key_id")

    @property
    @pulumi.getter(name="hostedZoneID")
    def hosted_zone_id(self) -> Optional[str]:
        """
        If set, the provider will manage only this zone in Route53 and will not do an lookup using the route53:ListHostedZonesByName api call.
        """
        return pulumi.get(self, "hosted_zone_id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        """
        Role is a Role ARN which the Route53 provider will assume using either the explicit credentials AccessKeyID/SecretAccessKey or the inferred credentials from environment variables, shared credentials file or AWS Instance metadata
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="secretAccessKeySecretRef")
    def secret_access_key_secret_ref(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef']:
        """
        The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        """
        return pulumi.get(self, "secret_access_key_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01Route53SecretAccessKeySecretRef(dict):
    """
    The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        The SecretAccessKey is used for authentication. If not set we fall-back to using env vars, shared credentials file or AWS Instance metadata https://docs.aws.amazon.com/sdk-for-go/v1/developer-guide/configuring-sdk.html#specifying-credentials
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversDns01Webhook(dict):
    """
    Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
    """
    def __init__(__self__, *,
                 group_name: str,
                 solver_name: str,
                 config: Optional[Mapping[str, Any]] = None):
        """
        Configure an external webhook based DNS01 challenge solver to manage DNS01 challenge records.
        :param str group_name: The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
        :param str solver_name: The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
        :param Mapping[str, Any] config: Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
        """
        pulumi.set(__self__, "group_name", group_name)
        pulumi.set(__self__, "solver_name", solver_name)
        if config is not None:
            pulumi.set(__self__, "config", config)

    @property
    @pulumi.getter(name="groupName")
    def group_name(self) -> str:
        """
        The API group name that should be used when POSTing ChallengePayload resources to the webhook apiserver. This should be the same as the GroupName specified in the webhook provider implementation.
        """
        return pulumi.get(self, "group_name")

    @property
    @pulumi.getter(name="solverName")
    def solver_name(self) -> str:
        """
        The name of the solver to use, as defined in the webhook provider implementation. This will typically be the name of the provider, e.g. 'cloudflare'.
        """
        return pulumi.get(self, "solver_name")

    @property
    @pulumi.getter
    def config(self) -> Optional[Mapping[str, Any]]:
        """
        Additional configuration that should be passed to the webhook apiserver when challenges are processed. This can contain arbitrary JSON data. Secret values should not be specified in this stanza. If secret values are needed (e.g. credentials for a DNS service), you should use a SecretKeySelector to reference a Secret resource. For details on the schema of this field, consult the webhook provider implementation's documentation.
        """
        return pulumi.get(self, "config")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01(dict):
    """
    Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
    """
    def __init__(__self__, *,
                 ingress: Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01Ingress'] = None):
        """
        Configures cert-manager to attempt to complete authorizations by performing the HTTP01 challenge flow. It is not possible to obtain certificates for wildcard domain names (e.g. `*.example.com`) using the HTTP01 challenge mechanism.
        :param 'ClusterIssuerSpecAcmeSolversHttp01IngressArgs' ingress: The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
        """
        if ingress is not None:
            pulumi.set(__self__, "ingress", ingress)

    @property
    @pulumi.getter
    def ingress(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01Ingress']:
        """
        The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
        """
        return pulumi.get(self, "ingress")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01Ingress(dict):
    """
    The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
    """
    def __init__(__self__, *,
                 class_: Optional[str] = None,
                 ingress_template: Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplate'] = None,
                 name: Optional[str] = None,
                 pod_template: Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplate'] = None,
                 service_type: Optional[str] = None):
        """
        The ingress based HTTP01 challenge solver will solve challenges by creating or modifying Ingress resources in order to route requests for '/.well-known/acme-challenge/XYZ' to 'challenge solver' pods that are provisioned by cert-manager for each Challenge to be completed.
        :param str class_: The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
        :param 'ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateArgs' ingress_template: Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges
        :param str name: The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
        :param 'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateArgs' pod_template: Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges
        :param str service_type: Optional service type for Kubernetes solver service
        """
        if class_ is not None:
            pulumi.set(__self__, "class_", class_)
        if ingress_template is not None:
            pulumi.set(__self__, "ingress_template", ingress_template)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if pod_template is not None:
            pulumi.set(__self__, "pod_template", pod_template)
        if service_type is not None:
            pulumi.set(__self__, "service_type", service_type)

    @property
    @pulumi.getter(name="class")
    def class_(self) -> Optional[str]:
        """
        The ingress class to use when creating Ingress resources to solve ACME challenges that use this challenge solver. Only one of 'class' or 'name' may be specified.
        """
        return pulumi.get(self, "class_")

    @property
    @pulumi.getter(name="ingressTemplate")
    def ingress_template(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplate']:
        """
        Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges
        """
        return pulumi.get(self, "ingress_template")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        """
        The name of the ingress resource that should have ACME challenge solving routes inserted into it in order to solve HTTP01 challenges. This is typically used in conjunction with ingress controllers like ingress-gce, which maintains a 1:1 mapping between external IPs and ingress resources.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="podTemplate")
    def pod_template(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplate']:
        """
        Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges
        """
        return pulumi.get(self, "pod_template")

    @property
    @pulumi.getter(name="serviceType")
    def service_type(self) -> Optional[str]:
        """
        Optional service type for Kubernetes solver service
        """
        return pulumi.get(self, "service_type")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplate(dict):
    """
    Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges
    """
    def __init__(__self__, *,
                 metadata: Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata'] = None):
        """
        Optional ingress template used to configure the ACME challenge solver ingress used for HTTP01 challenges
        :param 'ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadataArgs' metadata: ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata']:
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
        """
        return pulumi.get(self, "metadata")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressIngressTemplateMetadata(dict):
    """
    ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
    """
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        ObjectMeta overrides for the ingress used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
        :param Mapping[str, str] annotations: Annotations that should be added to the created ACME HTTP01 solver ingress.
        :param Mapping[str, str] labels: Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Annotations that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Labels that should be added to the created ACME HTTP01 solver ingress.
        """
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplate(dict):
    """
    Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges
    """
    def __init__(__self__, *,
                 metadata: Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata'] = None,
                 spec: Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec'] = None):
        """
        Optional pod template used to configure the ACME challenge solver pods used for HTTP01 challenges
        :param 'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadataArgs' metadata: ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
        :param 'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecArgs' spec: PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
        """
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter
    def metadata(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata']:
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec']:
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
        """
        return pulumi.get(self, "spec")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateMetadata(dict):
    """
    ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
    """
    def __init__(__self__, *,
                 annotations: Optional[Mapping[str, str]] = None,
                 labels: Optional[Mapping[str, str]] = None):
        """
        ObjectMeta overrides for the pod used to solve HTTP01 challenges. Only the 'labels' and 'annotations' fields may be set. If labels or annotations overlap with in-built values, the values here will override the in-built values.
        :param Mapping[str, str] annotations: Annotations that should be added to the create ACME HTTP01 solver pods.
        :param Mapping[str, str] labels: Labels that should be added to the created ACME HTTP01 solver pods.
        """
        if annotations is not None:
            pulumi.set(__self__, "annotations", annotations)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)

    @property
    @pulumi.getter
    def annotations(self) -> Optional[Mapping[str, str]]:
        """
        Annotations that should be added to the create ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "annotations")

    @property
    @pulumi.getter
    def labels(self) -> Optional[Mapping[str, str]]:
        """
        Labels that should be added to the created ACME HTTP01 solver pods.
        """
        return pulumi.get(self, "labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpec(dict):
    """
    PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
    """
    def __init__(__self__, *,
                 affinity: Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity'] = None,
                 node_selector: Optional[Mapping[str, str]] = None,
                 priority_class_name: Optional[str] = None,
                 service_account_name: Optional[str] = None,
                 tolerations: Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations']] = None):
        """
        PodSpec defines overrides for the HTTP01 challenge solver pod. Only the 'priorityClassName', 'nodeSelector', 'affinity', 'serviceAccountName' and 'tolerations' fields are supported currently. All other fields will be ignored.
        :param 'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityArgs' affinity: If specified, the pod's scheduling constraints
        :param Mapping[str, str] node_selector: NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        :param str priority_class_name: If specified, the pod's priorityClassName.
        :param str service_account_name: If specified, the pod's service account
        :param Sequence['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerationsArgs'] tolerations: If specified, the pod's tolerations.
        """
        if affinity is not None:
            pulumi.set(__self__, "affinity", affinity)
        if node_selector is not None:
            pulumi.set(__self__, "node_selector", node_selector)
        if priority_class_name is not None:
            pulumi.set(__self__, "priority_class_name", priority_class_name)
        if service_account_name is not None:
            pulumi.set(__self__, "service_account_name", service_account_name)
        if tolerations is not None:
            pulumi.set(__self__, "tolerations", tolerations)

    @property
    @pulumi.getter
    def affinity(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity']:
        """
        If specified, the pod's scheduling constraints
        """
        return pulumi.get(self, "affinity")

    @property
    @pulumi.getter(name="nodeSelector")
    def node_selector(self) -> Optional[Mapping[str, str]]:
        """
        NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
        """
        return pulumi.get(self, "node_selector")

    @property
    @pulumi.getter(name="priorityClassName")
    def priority_class_name(self) -> Optional[str]:
        """
        If specified, the pod's priorityClassName.
        """
        return pulumi.get(self, "priority_class_name")

    @property
    @pulumi.getter(name="serviceAccountName")
    def service_account_name(self) -> Optional[str]:
        """
        If specified, the pod's service account
        """
        return pulumi.get(self, "service_account_name")

    @property
    @pulumi.getter
    def tolerations(self) -> Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations']]:
        """
        If specified, the pod's tolerations.
        """
        return pulumi.get(self, "tolerations")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinity(dict):
    """
    If specified, the pod's scheduling constraints
    """
    def __init__(__self__, *,
                 node_affinity: Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity'] = None,
                 pod_affinity: Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity'] = None,
                 pod_anti_affinity: Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity'] = None):
        """
        If specified, the pod's scheduling constraints
        :param 'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityArgs' node_affinity: Describes node affinity scheduling rules for the pod.
        :param 'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityArgs' pod_affinity: Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param 'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityArgs' pod_anti_affinity: Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """
        if node_affinity is not None:
            pulumi.set(__self__, "node_affinity", node_affinity)
        if pod_affinity is not None:
            pulumi.set(__self__, "pod_affinity", pod_affinity)
        if pod_anti_affinity is not None:
            pulumi.set(__self__, "pod_anti_affinity", pod_anti_affinity)

    @property
    @pulumi.getter(name="nodeAffinity")
    def node_affinity(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity']:
        """
        Describes node affinity scheduling rules for the pod.
        """
        return pulumi.get(self, "node_affinity")

    @property
    @pulumi.getter(name="podAffinity")
    def pod_affinity(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity']:
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        """
        return pulumi.get(self, "pod_affinity")

    @property
    @pulumi.getter(name="podAntiAffinity")
    def pod_anti_affinity(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity']:
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        """
        return pulumi.get(self, "pod_anti_affinity")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinity(dict):
    """
    Describes node affinity scheduling rules for the pod.
    """
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution'] = None):
        """
        Describes node affinity scheduling rules for the pod.
        :param Sequence['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
        :param 'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs' required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution']:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    """
    An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
    """
    def __init__(__self__, *,
                 preference: 'outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference',
                 weight: int):
        """
        An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
        :param 'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceArgs' preference: A node selector term, associated with the corresponding weight.
        :param int weight: Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        pulumi.set(__self__, "preference", preference)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter
    def preference(self) -> 'outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference':
        """
        A node selector term, associated with the corresponding weight.
        """
        return pulumi.get(self, "preference")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreference(dict):
    """
    A node selector term, associated with the corresponding weight.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']] = None):
        """
        A node selector term, associated with the corresponding weight.
        :param Sequence['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressionsArgs'] match_expressions: A list of node selector requirements by node's labels.
        :param Sequence['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFieldsArgs'] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions']]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields']]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchExpressions(dict):
    """
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityPreferredDuringSchedulingIgnoredDuringExecutionPreferenceMatchFields(dict):
    """
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    """
    If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
    """
    def __init__(__self__, *,
                 node_selector_terms: Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']):
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
        :param Sequence['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsArgs'] node_selector_terms: Required. A list of node selector terms. The terms are ORed.
        """
        pulumi.set(__self__, "node_selector_terms", node_selector_terms)

    @property
    @pulumi.getter(name="nodeSelectorTerms")
    def node_selector_terms(self) -> Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms']:
        """
        Required. A list of node selector terms. The terms are ORed.
        """
        return pulumi.get(self, "node_selector_terms")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTerms(dict):
    """
    A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']] = None,
                 match_fields: Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']] = None):
        """
        A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
        :param Sequence['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressionsArgs'] match_expressions: A list of node selector requirements by node's labels.
        :param Sequence['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFieldsArgs'] match_fields: A list of node selector requirements by node's fields.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_fields is not None:
            pulumi.set(__self__, "match_fields", match_fields)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions']]:
        """
        A list of node selector requirements by node's labels.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchFields")
    def match_fields(self) -> Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields']]:
        """
        A list of node selector requirements by node's fields.
        """
        return pulumi.get(self, "match_fields")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchExpressions(dict):
    """
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityNodeAffinityRequiredDuringSchedulingIgnoredDuringExecutionNodeSelectorTermsMatchFields(dict):
    """
    A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: The label key that the selector applies to.
        :param str operator: Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        :param Sequence[str] values: An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        The label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinity(dict):
    """
    Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
    """
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        """
        Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
        :param Sequence['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        :param Sequence['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs'] required_during_scheduling_ignored_during_execution: If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        """
        If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    """
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
    """
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param 'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs' pod_affinity_term: Required. A pod affinity term, associated with the corresponding weight.
        :param int weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    """
    Required. A pod affinity term, associated with the corresponding weight.
    """
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param 'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs' label_selector: A label query over a set of resources, in this case pods.
        :param Sequence[str] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    """
    A label query over a set of resources, in this case pods.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param Sequence['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    """
    Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
    """
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        """
        Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param 'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs' label_selector: A label query over a set of resources, in this case pods.
        :param Sequence[str] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    """
    A label query over a set of resources, in this case pods.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param Sequence['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinity(dict):
    """
    Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
    """
    def __init__(__self__, *,
                 preferred_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']] = None,
                 required_during_scheduling_ignored_during_execution: Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']] = None):
        """
        Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
        :param Sequence['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionArgs'] preferred_during_scheduling_ignored_during_execution: The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        :param Sequence['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionArgs'] required_during_scheduling_ignored_during_execution: If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        if preferred_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "preferred_during_scheduling_ignored_during_execution", preferred_during_scheduling_ignored_during_execution)
        if required_during_scheduling_ignored_during_execution is not None:
            pulumi.set(__self__, "required_during_scheduling_ignored_during_execution", required_during_scheduling_ignored_during_execution)

    @property
    @pulumi.getter(name="preferredDuringSchedulingIgnoredDuringExecution")
    def preferred_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution']]:
        """
        The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
        """
        return pulumi.get(self, "preferred_during_scheduling_ignored_during_execution")

    @property
    @pulumi.getter(name="requiredDuringSchedulingIgnoredDuringExecution")
    def required_during_scheduling_ignored_during_execution(self) -> Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution']]:
        """
        If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
        """
        return pulumi.get(self, "required_during_scheduling_ignored_during_execution")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecution(dict):
    """
    The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
    """
    def __init__(__self__, *,
                 pod_affinity_term: 'outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm',
                 weight: int):
        """
        The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
        :param 'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermArgs' pod_affinity_term: Required. A pod affinity term, associated with the corresponding weight.
        :param int weight: weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        pulumi.set(__self__, "pod_affinity_term", pod_affinity_term)
        pulumi.set(__self__, "weight", weight)

    @property
    @pulumi.getter(name="podAffinityTerm")
    def pod_affinity_term(self) -> 'outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm':
        """
        Required. A pod affinity term, associated with the corresponding weight.
        """
        return pulumi.get(self, "pod_affinity_term")

    @property
    @pulumi.getter
    def weight(self) -> int:
        """
        weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
        """
        return pulumi.get(self, "weight")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTerm(dict):
    """
    Required. A pod affinity term, associated with the corresponding weight.
    """
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        """
        Required. A pod affinity term, associated with the corresponding weight.
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param 'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorArgs' label_selector: A label query over a set of resources, in this case pods.
        :param Sequence[str] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector']:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelector(dict):
    """
    A label query over a set of resources, in this case pods.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param Sequence['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityPreferredDuringSchedulingIgnoredDuringExecutionPodAffinityTermLabelSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecution(dict):
    """
    Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
    """
    def __init__(__self__, *,
                 topology_key: str,
                 label_selector: Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector'] = None,
                 namespaces: Optional[Sequence[str]] = None):
        """
        Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
        :param str topology_key: This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        :param 'ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorArgs' label_selector: A label query over a set of resources, in this case pods.
        :param Sequence[str] namespaces: namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        pulumi.set(__self__, "topology_key", topology_key)
        if label_selector is not None:
            pulumi.set(__self__, "label_selector", label_selector)
        if namespaces is not None:
            pulumi.set(__self__, "namespaces", namespaces)

    @property
    @pulumi.getter(name="topologyKey")
    def topology_key(self) -> str:
        """
        This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
        """
        return pulumi.get(self, "topology_key")

    @property
    @pulumi.getter(name="labelSelector")
    def label_selector(self) -> Optional['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector']:
        """
        A label query over a set of resources, in this case pods.
        """
        return pulumi.get(self, "label_selector")

    @property
    @pulumi.getter
    def namespaces(self) -> Optional[Sequence[str]]:
        """
        namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
        """
        return pulumi.get(self, "namespaces")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelector(dict):
    """
    A label query over a set of resources, in this case pods.
    """
    def __init__(__self__, *,
                 match_expressions: Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        A label query over a set of resources, in this case pods.
        :param Sequence['ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressionsArgs'] match_expressions: matchExpressions is a list of label selector requirements. The requirements are ANDed.
        :param Mapping[str, str] match_labels: matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        if match_expressions is not None:
            pulumi.set(__self__, "match_expressions", match_expressions)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="matchExpressions")
    def match_expressions(self) -> Optional[Sequence['outputs.ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions']]:
        """
        matchExpressions is a list of label selector requirements. The requirements are ANDed.
        """
        return pulumi.get(self, "match_expressions")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecAffinityPodAntiAffinityRequiredDuringSchedulingIgnoredDuringExecutionLabelSelectorMatchExpressions(dict):
    """
    A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
    """
    def __init__(__self__, *,
                 key: str,
                 operator: str,
                 values: Optional[Sequence[str]] = None):
        """
        A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
        :param str key: key is the label key that the selector applies to.
        :param str operator: operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        :param Sequence[str] values: values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "operator", operator)
        if values is not None:
            pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def key(self) -> str:
        """
        key is the label key that the selector applies to.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> str:
        """
        operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter
    def values(self) -> Optional[Sequence[str]]:
        """
        values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
        """
        return pulumi.get(self, "values")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversHttp01IngressPodTemplateSpecTolerations(dict):
    """
    The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
    """
    def __init__(__self__, *,
                 effect: Optional[str] = None,
                 key: Optional[str] = None,
                 operator: Optional[str] = None,
                 toleration_seconds: Optional[int] = None,
                 value: Optional[str] = None):
        """
        The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
        :param str effect: Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        :param str key: Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        :param str operator: Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
        :param int toleration_seconds: TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        :param str value: Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        if effect is not None:
            pulumi.set(__self__, "effect", effect)
        if key is not None:
            pulumi.set(__self__, "key", key)
        if operator is not None:
            pulumi.set(__self__, "operator", operator)
        if toleration_seconds is not None:
            pulumi.set(__self__, "toleration_seconds", toleration_seconds)
        if value is not None:
            pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter
    def effect(self) -> Optional[str]:
        """
        Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
        """
        return pulumi.get(self, "effect")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
        """
        return pulumi.get(self, "key")

    @property
    @pulumi.getter
    def operator(self) -> Optional[str]:
        """
        Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
        """
        return pulumi.get(self, "operator")

    @property
    @pulumi.getter(name="tolerationSeconds")
    def toleration_seconds(self) -> Optional[int]:
        """
        TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
        """
        return pulumi.get(self, "toleration_seconds")

    @property
    @pulumi.getter
    def value(self) -> Optional[str]:
        """
        Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
        """
        return pulumi.get(self, "value")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecAcmeSolversSelector(dict):
    """
    Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
    """
    def __init__(__self__, *,
                 dns_names: Optional[Sequence[str]] = None,
                 dns_zones: Optional[Sequence[str]] = None,
                 match_labels: Optional[Mapping[str, str]] = None):
        """
        Selector selects a set of DNSNames on the Certificate resource that should be solved using this challenge solver. If not specified, the solver will be treated as the 'default' solver with the lowest priority, i.e. if any other solver has a more specific match, it will be used instead.
        :param Sequence[str] dns_names: List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
        :param Sequence[str] dns_zones: List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
        :param Mapping[str, str] match_labels: A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
        """
        if dns_names is not None:
            pulumi.set(__self__, "dns_names", dns_names)
        if dns_zones is not None:
            pulumi.set(__self__, "dns_zones", dns_zones)
        if match_labels is not None:
            pulumi.set(__self__, "match_labels", match_labels)

    @property
    @pulumi.getter(name="dnsNames")
    def dns_names(self) -> Optional[Sequence[str]]:
        """
        List of DNSNames that this solver will be used to solve. If specified and a match is found, a dnsNames selector will take precedence over a dnsZones selector. If multiple solvers match with the same dnsNames value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
        """
        return pulumi.get(self, "dns_names")

    @property
    @pulumi.getter(name="dnsZones")
    def dns_zones(self) -> Optional[Sequence[str]]:
        """
        List of DNSZones that this solver will be used to solve. The most specific DNS zone match specified here will take precedence over other DNS zone matches, so a solver specifying sys.example.com will be selected over one specifying example.com for the domain www.sys.example.com. If multiple solvers match with the same dnsZones value, the solver with the most matching labels in matchLabels will be selected. If neither has more matches, the solver defined earlier in the list will be selected.
        """
        return pulumi.get(self, "dns_zones")

    @property
    @pulumi.getter(name="matchLabels")
    def match_labels(self) -> Optional[Mapping[str, str]]:
        """
        A label selector that is used to refine the set of certificate's that this challenge solver will apply to.
        """
        return pulumi.get(self, "match_labels")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecCa(dict):
    """
    CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
    """
    def __init__(__self__, *,
                 secret_name: str,
                 crl_distribution_points: Optional[Sequence[str]] = None,
                 ocsp_servers: Optional[Sequence[str]] = None):
        """
        CA configures this issuer to sign certificates using a signing CA keypair stored in a Secret resource. This is used to build internal PKIs that are managed by cert-manager.
        :param str secret_name: SecretName is the name of the secret used to sign Certificates issued by this Issuer.
        :param Sequence[str] crl_distribution_points: The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
        :param Sequence[str] ocsp_servers: The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
        """
        pulumi.set(__self__, "secret_name", secret_name)
        if crl_distribution_points is not None:
            pulumi.set(__self__, "crl_distribution_points", crl_distribution_points)
        if ocsp_servers is not None:
            pulumi.set(__self__, "ocsp_servers", ocsp_servers)

    @property
    @pulumi.getter(name="secretName")
    def secret_name(self) -> str:
        """
        SecretName is the name of the secret used to sign Certificates issued by this Issuer.
        """
        return pulumi.get(self, "secret_name")

    @property
    @pulumi.getter(name="crlDistributionPoints")
    def crl_distribution_points(self) -> Optional[Sequence[str]]:
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set, certificates will be issued without distribution points set.
        """
        return pulumi.get(self, "crl_distribution_points")

    @property
    @pulumi.getter(name="ocspServers")
    def ocsp_servers(self) -> Optional[Sequence[str]]:
        """
        The OCSP server list is an X.509 v3 extension that defines a list of URLs of OCSP responders. The OCSP responders can be queried for the revocation status of an issued certificate. If not set, the certificate will be issued with no OCSP servers set. For example, an OCSP server URL could be "http://ocsp.int-x3.letsencrypt.org".
        """
        return pulumi.get(self, "ocsp_servers")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecSelfSigned(dict):
    """
    SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
    """
    def __init__(__self__, *,
                 crl_distribution_points: Optional[Sequence[str]] = None):
        """
        SelfSigned configures this issuer to 'self sign' certificates using the private key used to create the CertificateRequest object.
        :param Sequence[str] crl_distribution_points: The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
        """
        if crl_distribution_points is not None:
            pulumi.set(__self__, "crl_distribution_points", crl_distribution_points)

    @property
    @pulumi.getter(name="crlDistributionPoints")
    def crl_distribution_points(self) -> Optional[Sequence[str]]:
        """
        The CRL distribution points is an X.509 v3 certificate extension which identifies the location of the CRL from which the revocation of this certificate can be checked. If not set certificate will be issued without CDP. Values are strings.
        """
        return pulumi.get(self, "crl_distribution_points")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecVault(dict):
    """
    Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
    """
    def __init__(__self__, *,
                 auth: 'outputs.ClusterIssuerSpecVaultAuth',
                 path: str,
                 server: str,
                 ca_bundle: Optional[str] = None,
                 namespace: Optional[str] = None):
        """
        Vault configures this issuer to sign certificates using a HashiCorp Vault PKI backend.
        :param 'ClusterIssuerSpecVaultAuthArgs' auth: Auth configures how cert-manager authenticates with the Vault server.
        :param str path: Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
        :param str server: Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
        :param str ca_bundle: PEM encoded CA bundle used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.
        :param str namespace: Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
        """
        pulumi.set(__self__, "auth", auth)
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "server", server)
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)

    @property
    @pulumi.getter
    def auth(self) -> 'outputs.ClusterIssuerSpecVaultAuth':
        """
        Auth configures how cert-manager authenticates with the Vault server.
        """
        return pulumi.get(self, "auth")

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path is the mount path of the Vault PKI backend's `sign` endpoint, e.g: "my_pki_mount/sign/my-role-name".
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter
    def server(self) -> str:
        """
        Server is the connection address for the Vault server, e.g: "https://vault.example.com:8200".
        """
        return pulumi.get(self, "server")

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[str]:
        """
        PEM encoded CA bundle used to validate Vault server certificate. Only used if the Server URL is using HTTPS protocol. This parameter is ignored for plain HTTP protocol connection. If not set the system root certificates are used to validate the TLS connection.
        """
        return pulumi.get(self, "ca_bundle")

    @property
    @pulumi.getter
    def namespace(self) -> Optional[str]:
        """
        Name of the vault namespace. Namespaces is a set of features within Vault Enterprise that allows Vault environments to support Secure Multi-tenancy. e.g: "ns1" More about namespaces can be found here https://www.vaultproject.io/docs/enterprise/namespaces
        """
        return pulumi.get(self, "namespace")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecVaultAuth(dict):
    """
    Auth configures how cert-manager authenticates with the Vault server.
    """
    def __init__(__self__, *,
                 app_role: Optional['outputs.ClusterIssuerSpecVaultAuthAppRole'] = None,
                 kubernetes: Optional['outputs.ClusterIssuerSpecVaultAuthKubernetes'] = None,
                 token_secret_ref: Optional['outputs.ClusterIssuerSpecVaultAuthTokenSecretRef'] = None):
        """
        Auth configures how cert-manager authenticates with the Vault server.
        :param 'ClusterIssuerSpecVaultAuthAppRoleArgs' app_role: AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
        :param 'ClusterIssuerSpecVaultAuthKubernetesArgs' kubernetes: Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
        :param 'ClusterIssuerSpecVaultAuthTokenSecretRefArgs' token_secret_ref: TokenSecretRef authenticates with Vault by presenting a token.
        """
        if app_role is not None:
            pulumi.set(__self__, "app_role", app_role)
        if kubernetes is not None:
            pulumi.set(__self__, "kubernetes", kubernetes)
        if token_secret_ref is not None:
            pulumi.set(__self__, "token_secret_ref", token_secret_ref)

    @property
    @pulumi.getter(name="appRole")
    def app_role(self) -> Optional['outputs.ClusterIssuerSpecVaultAuthAppRole']:
        """
        AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
        """
        return pulumi.get(self, "app_role")

    @property
    @pulumi.getter
    def kubernetes(self) -> Optional['outputs.ClusterIssuerSpecVaultAuthKubernetes']:
        """
        Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
        """
        return pulumi.get(self, "kubernetes")

    @property
    @pulumi.getter(name="tokenSecretRef")
    def token_secret_ref(self) -> Optional['outputs.ClusterIssuerSpecVaultAuthTokenSecretRef']:
        """
        TokenSecretRef authenticates with Vault by presenting a token.
        """
        return pulumi.get(self, "token_secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecVaultAuthAppRole(dict):
    """
    AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
    """
    def __init__(__self__, *,
                 path: str,
                 role_id: str,
                 secret_ref: 'outputs.ClusterIssuerSpecVaultAuthAppRoleSecretRef'):
        """
        AppRole authenticates with Vault using the App Role auth mechanism, with the role and secret stored in a Kubernetes Secret resource.
        :param str path: Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
        :param str role_id: RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
        :param 'ClusterIssuerSpecVaultAuthAppRoleSecretRefArgs' secret_ref: Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
        """
        pulumi.set(__self__, "path", path)
        pulumi.set(__self__, "role_id", role_id)
        pulumi.set(__self__, "secret_ref", secret_ref)

    @property
    @pulumi.getter
    def path(self) -> str:
        """
        Path where the App Role authentication backend is mounted in Vault, e.g: "approle"
        """
        return pulumi.get(self, "path")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> str:
        """
        RoleID configured in the App Role authentication backend when setting up the authentication backend in Vault.
        """
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> 'outputs.ClusterIssuerSpecVaultAuthAppRoleSecretRef':
        """
        Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
        """
        return pulumi.get(self, "secret_ref")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecVaultAuthAppRoleSecretRef(dict):
    """
    Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        Reference to a key in a Secret that contains the App Role secret used to authenticate with Vault. The `key` field must be specified and denotes which entry within the Secret resource is used as the app role secret.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecVaultAuthKubernetes(dict):
    """
    Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
    """
    def __init__(__self__, *,
                 role: str,
                 secret_ref: 'outputs.ClusterIssuerSpecVaultAuthKubernetesSecretRef',
                 mount_path: Optional[str] = None):
        """
        Kubernetes authenticates with Vault by passing the ServiceAccount token stored in the named Secret resource to the Vault server.
        :param str role: A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
        :param 'ClusterIssuerSpecVaultAuthKubernetesSecretRefArgs' secret_ref: The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
        :param str mount_path: The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
        """
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "secret_ref", secret_ref)
        if mount_path is not None:
            pulumi.set(__self__, "mount_path", mount_path)

    @property
    @pulumi.getter
    def role(self) -> str:
        """
        A required field containing the Vault Role to assume. A Role binds a Kubernetes ServiceAccount with a set of Vault policies.
        """
        return pulumi.get(self, "role")

    @property
    @pulumi.getter(name="secretRef")
    def secret_ref(self) -> 'outputs.ClusterIssuerSpecVaultAuthKubernetesSecretRef':
        """
        The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
        """
        return pulumi.get(self, "secret_ref")

    @property
    @pulumi.getter(name="mountPath")
    def mount_path(self) -> Optional[str]:
        """
        The Vault mountPath here is the mount path to use when authenticating with Vault. For example, setting a value to `/v1/auth/foo`, will use the path `/v1/auth/foo/login` to authenticate with Vault. If unspecified, the default value "/v1/auth/kubernetes" will be used.
        """
        return pulumi.get(self, "mount_path")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecVaultAuthKubernetesSecretRef(dict):
    """
    The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        The required Secret field containing a Kubernetes ServiceAccount JWT used for authenticating with Vault. Use of 'ambient credentials' is not supported.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecVaultAuthTokenSecretRef(dict):
    """
    TokenSecretRef authenticates with Vault by presenting a token.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        TokenSecretRef authenticates with Vault by presenting a token.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecVenafi(dict):
    """
    Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
    """
    def __init__(__self__, *,
                 zone: str,
                 cloud: Optional['outputs.ClusterIssuerSpecVenafiCloud'] = None,
                 tpp: Optional['outputs.ClusterIssuerSpecVenafiTpp'] = None):
        """
        Venafi configures this issuer to sign certificates using a Venafi TPP or Venafi Cloud policy zone.
        :param str zone: Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
        :param 'ClusterIssuerSpecVenafiCloudArgs' cloud: Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
        :param 'ClusterIssuerSpecVenafiTppArgs' tpp: TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
        """
        pulumi.set(__self__, "zone", zone)
        if cloud is not None:
            pulumi.set(__self__, "cloud", cloud)
        if tpp is not None:
            pulumi.set(__self__, "tpp", tpp)

    @property
    @pulumi.getter
    def zone(self) -> str:
        """
        Zone is the Venafi Policy Zone to use for this issuer. All requests made to the Venafi platform will be restricted by the named zone policy. This field is required.
        """
        return pulumi.get(self, "zone")

    @property
    @pulumi.getter
    def cloud(self) -> Optional['outputs.ClusterIssuerSpecVenafiCloud']:
        """
        Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
        """
        return pulumi.get(self, "cloud")

    @property
    @pulumi.getter
    def tpp(self) -> Optional['outputs.ClusterIssuerSpecVenafiTpp']:
        """
        TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
        """
        return pulumi.get(self, "tpp")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecVenafiCloud(dict):
    """
    Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
    """
    def __init__(__self__, *,
                 api_token_secret_ref: 'outputs.ClusterIssuerSpecVenafiCloudApiTokenSecretRef',
                 url: Optional[str] = None):
        """
        Cloud specifies the Venafi cloud configuration settings. Only one of TPP or Cloud may be specified.
        :param 'ClusterIssuerSpecVenafiCloudApiTokenSecretRefArgs' api_token_secret_ref: APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
        :param str url: URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
        """
        pulumi.set(__self__, "api_token_secret_ref", api_token_secret_ref)
        if url is not None:
            pulumi.set(__self__, "url", url)

    @property
    @pulumi.getter(name="apiTokenSecretRef")
    def api_token_secret_ref(self) -> 'outputs.ClusterIssuerSpecVenafiCloudApiTokenSecretRef':
        """
        APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
        """
        return pulumi.get(self, "api_token_secret_ref")

    @property
    @pulumi.getter
    def url(self) -> Optional[str]:
        """
        URL is the base URL for Venafi Cloud. Defaults to "https://api.venafi.cloud/v1".
        """
        return pulumi.get(self, "url")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecVenafiCloudApiTokenSecretRef(dict):
    """
    APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
    """
    def __init__(__self__, *,
                 name: str,
                 key: Optional[str] = None):
        """
        APITokenSecretRef is a secret key selector for the Venafi Cloud API token.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        :param str key: The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        pulumi.set(__self__, "name", name)
        if key is not None:
            pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def key(self) -> Optional[str]:
        """
        The key of the entry in the Secret resource's `data` field to be used. Some instances of this field may be defaulted, in others it may be required.
        """
        return pulumi.get(self, "key")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecVenafiTpp(dict):
    """
    TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
    """
    def __init__(__self__, *,
                 credentials_ref: 'outputs.ClusterIssuerSpecVenafiTppCredentialsRef',
                 url: str,
                 ca_bundle: Optional[str] = None):
        """
        TPP specifies Trust Protection Platform configuration settings. Only one of TPP or Cloud may be specified.
        :param 'ClusterIssuerSpecVenafiTppCredentialsRefArgs' credentials_ref: CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
        :param str url: URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
        :param str ca_bundle: CABundle is a PEM encoded TLS certificate to use to verify connections to the TPP instance. If specified, system roots will not be used and the issuing CA for the TPP instance must be verifiable using the provided root. If not specified, the connection will be verified using the cert-manager system root certificates.
        """
        pulumi.set(__self__, "credentials_ref", credentials_ref)
        pulumi.set(__self__, "url", url)
        if ca_bundle is not None:
            pulumi.set(__self__, "ca_bundle", ca_bundle)

    @property
    @pulumi.getter(name="credentialsRef")
    def credentials_ref(self) -> 'outputs.ClusterIssuerSpecVenafiTppCredentialsRef':
        """
        CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
        """
        return pulumi.get(self, "credentials_ref")

    @property
    @pulumi.getter
    def url(self) -> str:
        """
        URL is the base URL for the vedsdk endpoint of the Venafi TPP instance, for example: "https://tpp.example.com/vedsdk".
        """
        return pulumi.get(self, "url")

    @property
    @pulumi.getter(name="caBundle")
    def ca_bundle(self) -> Optional[str]:
        """
        CABundle is a PEM encoded TLS certificate to use to verify connections to the TPP instance. If specified, system roots will not be used and the issuing CA for the TPP instance must be verifiable using the provided root. If not specified, the connection will be verified using the cert-manager system root certificates.
        """
        return pulumi.get(self, "ca_bundle")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerSpecVenafiTppCredentialsRef(dict):
    """
    CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
    """
    def __init__(__self__, *,
                 name: str):
        """
        CredentialsRef is a reference to a Secret containing the username and password for the TPP server. The secret must contain two keys, 'username' and 'password'.
        :param str name: Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Name of the resource being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        """
        return pulumi.get(self, "name")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerStatus(dict):
    """
    Status of the ClusterIssuer. This is set and managed automatically.
    """
    def __init__(__self__, *,
                 acme: Optional['outputs.ClusterIssuerStatusAcme'] = None,
                 conditions: Optional[Sequence['outputs.ClusterIssuerStatusConditions']] = None):
        """
        Status of the ClusterIssuer. This is set and managed automatically.
        :param 'ClusterIssuerStatusAcmeArgs' acme: ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
        :param Sequence['ClusterIssuerStatusConditionsArgs'] conditions: List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
        """
        if acme is not None:
            pulumi.set(__self__, "acme", acme)
        if conditions is not None:
            pulumi.set(__self__, "conditions", conditions)

    @property
    @pulumi.getter
    def acme(self) -> Optional['outputs.ClusterIssuerStatusAcme']:
        """
        ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
        """
        return pulumi.get(self, "acme")

    @property
    @pulumi.getter
    def conditions(self) -> Optional[Sequence['outputs.ClusterIssuerStatusConditions']]:
        """
        List of status conditions to indicate the status of a CertificateRequest. Known condition types are `Ready`.
        """
        return pulumi.get(self, "conditions")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerStatusAcme(dict):
    """
    ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
    """
    def __init__(__self__, *,
                 last_registered_email: Optional[str] = None,
                 uri: Optional[str] = None):
        """
        ACME specific status options. This field should only be set if the Issuer is configured to use an ACME server to issue certificates.
        :param str last_registered_email: LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
        :param str uri: URI is the unique account identifier, which can also be used to retrieve account details from the CA
        """
        if last_registered_email is not None:
            pulumi.set(__self__, "last_registered_email", last_registered_email)
        if uri is not None:
            pulumi.set(__self__, "uri", uri)

    @property
    @pulumi.getter(name="lastRegisteredEmail")
    def last_registered_email(self) -> Optional[str]:
        """
        LastRegisteredEmail is the email associated with the latest registered ACME account, in order to track changes made to registered account associated with the  Issuer
        """
        return pulumi.get(self, "last_registered_email")

    @property
    @pulumi.getter
    def uri(self) -> Optional[str]:
        """
        URI is the unique account identifier, which can also be used to retrieve account details from the CA
        """
        return pulumi.get(self, "uri")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


@pulumi.output_type
class ClusterIssuerStatusConditions(dict):
    """
    IssuerCondition contains condition information for an Issuer.
    """
    def __init__(__self__, *,
                 status: str,
                 type: str,
                 last_transition_time: Optional[str] = None,
                 message: Optional[str] = None,
                 observed_generation: Optional[int] = None,
                 reason: Optional[str] = None):
        """
        IssuerCondition contains condition information for an Issuer.
        :param str status: Status of the condition, one of (`True`, `False`, `Unknown`).
        :param str type: Type of the condition, known values are (`Ready`).
        :param str last_transition_time: LastTransitionTime is the timestamp corresponding to the last status change of this condition.
        :param str message: Message is a human readable description of the details of the last transition, complementing reason.
        :param int observed_generation: If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
        :param str reason: Reason is a brief machine readable explanation for the condition's last transition.
        """
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)
        if last_transition_time is not None:
            pulumi.set(__self__, "last_transition_time", last_transition_time)
        if message is not None:
            pulumi.set(__self__, "message", message)
        if observed_generation is not None:
            pulumi.set(__self__, "observed_generation", observed_generation)
        if reason is not None:
            pulumi.set(__self__, "reason", reason)

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the condition, one of (`True`, `False`, `Unknown`).
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Type of the condition, known values are (`Ready`).
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="lastTransitionTime")
    def last_transition_time(self) -> Optional[str]:
        """
        LastTransitionTime is the timestamp corresponding to the last status change of this condition.
        """
        return pulumi.get(self, "last_transition_time")

    @property
    @pulumi.getter
    def message(self) -> Optional[str]:
        """
        Message is a human readable description of the details of the last transition, complementing reason.
        """
        return pulumi.get(self, "message")

    @property
    @pulumi.getter(name="observedGeneration")
    def observed_generation(self) -> Optional[int]:
        """
        If set, this represents the .metadata.generation that the condition was set based upon. For instance, if .metadata.generation is currently 12, but the .status.condition[x].observedGeneration is 9, the condition is out of date with respect to the current state of the Issuer.
        """
        return pulumi.get(self, "observed_generation")

    @property
    @pulumi.getter
    def reason(self) -> Optional[str]:
        """
        Reason is a brief machine readable explanation for the condition's last transition.
        """
        return pulumi.get(self, "reason")

    def _translate_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop


